{"version":3,"sources":["webpack:///src/app/contractor/client-add-form/client-add-form.component.ts","webpack:///src/app/contractor/client-add-form/client-add-form.component.html","webpack:///src/app/contractor/client-main/client-main.component.ts","webpack:///src/app/contractor/client-main/client-main.component.html","webpack:///src/app/contractor/client-service/client.service.ts","webpack:///src/app/contractor/contractor-routing.module.ts","webpack:///src/app/contractor/contractor.module.ts"],"names":["ClientAddFormComponent","dialogRef","clientService","infoPopup","formClient","nip","validators","required","validatenip","asyncValidators","clientExists","updateOn","name","regon","validateregon9","email","phonenumber","minLength","pattern","close","addClient","value","subscribe","next","res","showSuccessAdd","exit","error","err","showErrorAdd","complete","addNewClient","selector","templateUrl","styleUrls","ClientMainComponent","dialog","auth","messageService","confirmationService","client","onErr","id","clonedclients","loading","loadData","getClients","showErrorDownload","push","getCountClient","clientCount","showErrorCount","open","width","panelClass","afterClosed","result","console","log","add","severity","summary","detail","what","clear","updateClient","showSuccess","showError","confirm","message","acceptLabel","rejectLabel","acceptIcon","acceptButtonStyleClass","rejectButtonStyleClass","accept","deleteClient","showSuccessDelete","showErrorDelete","index","showDialogToAddClient","ClientService","http","get","data","post","put","responseType","providedIn","routes","path","component","ContractorRoutingModule","forChild","imports","exports","ContractorModule","declarations","providers","entryComponents"],"mappings":"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","file":"contractor-contractor-module-es5.js","sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { ClientService } from '../client-service/client.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AppValidators } from 'src/app/_validators/AppValidators';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-client-add-form',\n  templateUrl: './client-add-form.component.html',\n  styleUrls: ['./client-add-form.component.scss']\n})\nexport class ClientAddFormComponent implements OnInit {\n\n  formClient: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<ClientAddFormComponent>,\n    private clientService: ClientService, \n    private infoPopup: InfoPopupComponent) { }\n\n  ngOnInit() {\n    this.formClient = new FormGroup({\n      nip: new FormControl('', { validators: [Validators.required, AppValidators.validatenip], asyncValidators: [AppValidators.clientExists], updateOn: 'blur' }),\n      name: new FormControl('', { validators: [Validators.required] }),\n      regon: new FormControl('', { validators: [AppValidators.validateregon9], updateOn: 'blur' }),\n      email: new FormControl('', {validators: [Validators.email]}),\n      phonenumber: new FormControl('',{validators: [Validators.minLength(9),Validators.pattern('[0-9]')]})\n    });\n  }\n\n  exit(): void {\n    this.dialogRef.close();\n  }\n\n  addNewClient() {\n    \n    this.clientService.addClient(this.formClient.value).subscribe(\n      {\n        next: (res) => {\n          this.infoPopup.showSuccessAdd(\"klienta\");\n          this.exit();\n        },\n        error: (err) => {\n          this.infoPopup.showErrorAdd(\"klienta\");\n        },\n        complete: () => {\n        }\n      }\n    )\n  }\n\n}\n","<div class=\"sb-dialog-titlebar\">\n    <span class=\"\">Nowy Klient</span>\n</div>\n<div class=\"sb-dialog-content\">\n\n    <form class=\"m-4\" [formGroup]=\"formClient\">\n\n        <div class=\"form-group row\" style=\"margin-bottom: 30px;\">\n            <div class=\"col\">\n                <label class=\"sb-small-label\" for=\"name\">Nazwa</label>\n                <input [formControl]=\"formClient.get('name')\" type=\"text\" id=\"name\"\n                    class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\"\n                    placeholder=\"Nazwa Klienta\" required autocomplete=\"off\">\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('name').hasError('required') && formClient.get('name').touched\">\n                    musi być wypełnione\n                </p>\n            </div>\n        </div>\n\n        <div class=\"form-group row\" style=\"margin-bottom: 30px;\">\n            <div class=\"col\">\n                <label class=\"sb-small-label\" for=\"nip\">NIP</label>\n                <input [formControl]=\"formClient.get('nip')\" type=\"text\" id=\"nip\"\n                    class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"NIP\"\n                    required autocomplete=\"off\">\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('nip').hasError('required') && formClient.get('nip').touched\">\n                    musi być wypełnione\n                </p>\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('nip').hasError('nipFormat') && formClient.get('nip').touched\">\n                    niepoprawny nip\n                </p>\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('nip').hasError('nipExists') && formClient.get('nip').touched\">\n                    ten numer znajduje się na liście\n                </p>\n            </div>\n            <div class=\"col\">\n                <label class=\"sb-small-label\" for=\"regon\">REGON</label>\n\n                <input [formControl]=\"formClient.get('regon')\" type=\"text\" id=\"regon\"\n                    class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"REGON\"\n                    autocomplete=\"off\">\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('regon').hasError('regonFormat') && formClient.get('regon').touched\">\n                    niepoprawny regon\n                </p>\n            </div>\n        </div>\n      \n\n        <div class=\"form-group row\" style=\"margin-bottom: 30px;\">\n            <div class=\"col\">\n                <label class=\"sb-small-label\" for=\"email\">EMAIL</label>\n                <input [formControl]=\"formClient.get('email')\" type=\"text\" id=\"email\"\n                    class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Adres email\"\n                    autocomplete=\"off\">\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('email').hasError('email') && formClient.get('email').touched\">\n                    niepoprawny email\n                </p>\n            </div>\n            <div class=\"col\">\n                <label class=\"sb-small-label\" for=\"phonenumber\">Numer telefonu</label>\n                <input [formControl]=\"formClient.get('phonenumber')\" type=\"text\" id=\"phonenumber\"\n                    class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"nr. tel.\"\n                    autocomplete=\"off\">\n                <p class=\"invalid-feedback\"\n                    *ngIf=\"formClient.get('phonenumber').hasError('minLength') && formClient.get('phonenumber').touched\">\n                    niepoprawny numer telefonu\n                </p>\n            </div>\n        </div>\n\n    </form>\n</div>\n\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn sb-dialog-footer\">\n\n    <button pButton pRipple type=\"button\" (click)=\"exit()\" matTooltip=\"Anulowanie dodawania\" label=\"Anuluj\"\n        matTooltipClass=\"tooltip-red\" icon=\"pi pi-times\"\n        class=\"p-button-raised p-button-outlined p-button-secondary p-button-sm\"></button>\n\n    <button [disabled]=\"formClient.invalid\" pButton pRipple type=\"button\" (click)=\"addNewClient()\"\n        matTooltip=\"Dodaj klienta\" label=\"Zapisz\" matTooltipClass=\"tooltip-green\" icon=\"pi pi-check\"\n        class=\"p-button-raised p-button-success p-button-sm\"></button>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Client, ClientService } from '../client-service/client.service';\nimport { MessageService, SelectItem, ConfirmationService } from 'primeng/api';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { ClientAddFormComponent } from '../client-add-form/client-add-form.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-client-main',\n  templateUrl: './client-main.component.html',\n  styleUrls: ['./client-main.component.scss']\n})\nexport class ClientMainComponent implements OnInit {\n  \n  client: Client[] = [];\n\n  onErr: Client =\n    {\n      id: 0,\n      name: \"---\",\n      nip: \"---\",\n      regon: \"---\",\n      email: \"---\",\n      phonenumber: \"---\"\n    };\n  clientCount:number;\n  err: boolean;\n  newclient: boolean;\n  available: SelectItem[];\n  clonedclients: { [s: string]: Client; } = {};\n  loading=false;\n\n  constructor(\n    public dialog: MatDialog,\n    public auth:AuthService,\n    private clientService: ClientService, \n    private infoPopup: InfoPopupComponent, \n    private messageService: MessageService, \n    private confirmationService: ConfirmationService) { }\n\n  ngOnInit() {\n    this.err = false;\n    this.loadData();\n  }\n\n  loadData(){\n    this.loading=true;\n    this.clientService.getClients().subscribe(\n      {\n        next: (res) => {\n          this.client = res;\n          this.err = false;\n        },\n        error: (err) => {\n          this.showErrorDownload()\n          this.err = true;\n          this.client.push(this.onErr);\n        },\n        complete: () => {\n          this.loading=false;\n        }\n      }\n    )\n\n    this.clientService.getCountClient().subscribe({\n      next: (res) => {\n        this.clientCount = res\n      },\n      error: (err) => {\n        this.showErrorCount(\"klientów\")\n      },\n      complete: () => {\n      }\n    })\n\n\n  }\n\n  showDialogToAddClient() {\n    const dialogRef = this.dialog.open(ClientAddFormComponent, {\n      width: '550px',\n      panelClass: 'no-padding-dialog'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog client add was closed');\n    });\n  }\n\n\n  showSuccess() {\n    this.messageService.add({ severity: 'success', summary: 'Edycja Klienta', detail: 'Poprawnie Zaktualizowano Klienta' });\n  }\n  showError() {\n    this.messageService.add({ severity: 'error', summary: 'ERROR', detail: 'Nie udało się zaktualizować klienta' });\n  }\n\n  showErrorCount(what: String) {\n    this.messageService.add({ severity: 'error', summary: 'ERROR', detail: 'Nie udało się pobrać ilości ' + what });\n  }\n\n  showErrorDownload() {\n    this.messageService.add({ severity: 'error', summary: 'ERROR', detail: 'Nie udało się pobrać listy klientów. Proszę odświeżyć stronę' });\n  }\n\n  clear() {\n    this.messageService.clear();\n  }\n\n  onRowEditInit(client: Client) {\n    this.clonedclients[client.id] = { ...client };\n  }\n\n  onRowEditSave(client: Client) {\n    \n    this.clientService.updateClient(client.id, client).subscribe(\n      {\n        next: (res) => {\n          \n          this.showSuccess();\n        },\n        error: (err) => {\n          \n          this.showError()\n        },\n        complete: () => {\n          delete this.clonedclients[client.id];\n          this.loadData();\n        }\n      }\n    )\n  }\n\n  onRowDeleteClient(client: Client) {\n    this.confirmationService.confirm({\n      message: 'Na pewno chcesz usunąć '+ client.name + '?',\n      acceptLabel:'Tak',\n      rejectLabel:'Nie',\n      acceptIcon: 'pi pi-trash',\n      acceptButtonStyleClass: 'p-button-raised p-button-sm p-button-danger',\n      rejectButtonStyleClass: 'p-button-raised p-button-outlined p-button-secondary p-button-sm',\n      accept: () => {\n        this.clientService.deleteClient(client.id).subscribe(\n          {\n            next: (res) => {\n              this.infoPopup.showSuccessDelete(\"klienta\");\n            },\n            error: (err) => {\n              this.infoPopup.showErrorDelete(\"klient\");\n            },\n            complete: () => {\n              this.loadData();\n            }\n          }\n        )\n      }\n    });\n  }\n\n  onRowEditCancel(client: Client, index: number) {\n    this.client[index] = this.clonedclients[client.id];\n    delete this.clonedclients[client.id];\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col-lg-3 col-md-6 col-sm-6\">\n        <div class=\"card card-stats\">\n            <div class=\"card-body \">\n                <div class=\"row\">\n                    <div class=\"col-5 col-md-4\">\n                        <div class=\"text-center\">\n                            <span class=\"material-icons icon-big\">face</span>\n                        </div>\n                    </div>\n                    <div class=\"col-7 col-md-8\">\n                        <div class=\"numbers\">\n                            <p class=\"card-category\">Kontrahenci</p>\n                            <p class=\"card-title\">{{clientCount}}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-footer \">\n                <hr>\n                <div class=\"stats-bar\">\n                    <div class=\"stats\">\n                        <mat-icon class=\"fo-small-icon\">calculate</mat-icon><span class=\"fo-text\">Ilość</span>\n                    </div>\n                    <div class=\"stats-bar-button\">\n                        <button pButton type=\"button\" (click)=\"showDialogToAddClient()\"\n                        matTooltip=\"Dodanie nowej pozycji\" matTooltipClass=\"tooltip-green\" icon=\"pi pi-plus\"\n                        class=\"p-button-raised p-button-sm p-button-secondary\">\n                    </button>\n                        <!-- <button (click)=\"showDialogToAddClient()\" matTooltip=\"Dodanie nowego kontrahenta\"\n                            matTooltipClass=\"tooltip-red\"\n                            class=\"ui-button-info ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only\"\n                            icon=\"pi pi-pencil\" pbutton=\"\" piniteditablerow=\"\" type=\"button\"\n                            ng-reflect-icon=\"pi pi-pencil\"><span aria-hidden=\"true\"\n                                class=\"ui-button-icon-left ui-clickable pi pi-plus\"></span>\n                            <span aria-hidden=\"true\" class=\"ui-button-text ui-clickable\">ui-btn</span>\n                        </button> -->\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n\n        <p-table #ct [value]=\"client\" [loading]=\"loading\" dataKey=\"id\" editMode=\"row\" sortMode=\"multiple\"\n            [paginator]=\"true\" [rows]=\"10\" [rowsPerPageOptions]=\"[10,20,50]\" [showCurrentPageReport]=\"true\"\n            currentPageReportTemplate=\"{first} do {last} z {totalRecords}\" [filterDelay]=\"0\"\n            [globalFilterFields]=\"['name','nip','regon','email','phonenumber']\" [rowHover]=\"true\">\n            <ng-template pTemplate=\"caption\">\n                \n                <div class=\"row\">\n                    <div class=\"col\"><span>Lista Kontrahentów</span></div>\n                    <div class=\"col\" style=\"text-align: end;\"><input pInputText class=\"p-inputtext\" type=\"text\" (input)=\"ct.filterGlobal($event.target.value, 'contains')\"\n                        placeholder=\"Wyszukiwarka\" /></div>\n                </div>\n            </ng-template>\n            <ng-template pTemplate=\"header\">\n                <tr>\n                    <th pSortableColumn=\"name\">Nazwa<p-sortIcon field=\"name\"></p-sortIcon>\n                    </th>\n                    <th pSortableColumn=\"nip\">NIP<p-sortIcon field=\"nip\"></p-sortIcon>\n                    </th>\n                    <th pSortableColumn=\"regon\">REGON<p-sortIcon field=\"regon\"></p-sortIcon>\n                    </th>\n                    <th pSortableColumn=\"email\">EMAIL<p-sortIcon field=\"email\"></p-sortIcon>\n                    </th>\n                    <th pSortableColumn=\"phonenumber\">TEL.<p-sortIcon field=\"phonenumber\"></p-sortIcon>\n                    </th>\n                    <th style=\"width:8em\"></th>\n                </tr>\n            </ng-template>\n            <ng-template pTemplate=\"body\" let-rowData let-editing=\"editing\" let-ri=\"rowIndex\">\n                <tr [pEditableRow]=\"rowData\" class=\"ui-selectable-row\">\n                    <td>\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <input class=\"inline-edit\" pInputText type=\"text\" [(ngModel)]=\"rowData.name\" required>\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                {{rowData.name}}\n                            </ng-template>\n                        </p-cellEditor>\n                    </td>\n                    <td>\n                        {{rowData.nip}}\n                    </td>\n                    <td>\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <input class=\"inline-edit\" pInputText type=\"text\" [(ngModel)]=\"rowData.regon\">\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                {{rowData.regon}}\n                            </ng-template>\n                        </p-cellEditor>\n                    </td>\n\n                    <td>\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <input class=\"inline-edit\" pInputText type=\"text\" [(ngModel)]=\"rowData.email\">\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                {{rowData.email}}\n                            </ng-template>\n                        </p-cellEditor>\n                    </td>\n\n                    <td>\n                        <p-cellEditor>\n                            <ng-template pTemplate=\"input\">\n                                <input class=\"inline-edit\" pInputText type=\"text\" [(ngModel)]=\"rowData.phonenumber\">\n                            </ng-template>\n                            <ng-template pTemplate=\"output\">\n                                {{rowData.phonenumber}}\n                            </ng-template>\n                        </p-cellEditor>\n                    </td>\n\n\n                    <td style=\"text-align:center\">\n\n                        <button appPermission permission=\"clientWrite\" pButton pInitEditableRow type=\"button\" (click)=\"onRowEditInit(rowData)\"\n                            matTooltip=\"Edycja Kontrahenta\" matTooltipClass=\"tooltip-green\" *ngIf=\"!editing && !err\"\n                            icon=\"pi pi-pencil\" class=\"p-button-raised p-button-sm\"></button>\n\n                        <button appPermission permission=\"clientDelete\" pButton type=\"button\" (click)=\"onRowDeleteClient(rowData)\" matTooltip=\"Usuwanie\"\n                            matTooltipClass=\"tooltip-red\" *ngIf=\"!editing && !err && auth.isAdmin\" icon=\"pi pi-trash\"\n                            class=\"p-button-raised p-button-sm ml-1 p-button-danger\"></button>\n\n                        <button pButton pSaveEditableRow type=\"button\" (click)=\"onRowEditSave(rowData)\"\n                            matTooltip=\"Zapisz Kontrahenta\" matTooltipClass=\"tooltip-green\" *ngIf=\"editing\"\n                            icon=\"pi pi-check\" class=\"p-button-raised p-button-sm p-button-success\"></button>\n\n                        <button pButton pCancelEditableRow type=\"button\" (click)=\"onRowEditCancel(rowData, ri)\"\n                            matTooltip=\"Anuluj\" matTooltipClass=\"tooltip-red\" *ngIf=\"editing\" icon=\"pi pi-times\"\n                            class=\"p-button-raised p-button-sm ml-1 p-button-warning\"></button>\n                    </td>\n                </tr>\n            </ng-template>\n            <ng-template pTemplate=\"emptymessage\">\n                <tr>\n                    <td colspan=\"6\" style=\"text-align:left\">Brak danych.</td>\n                </tr>\n            </ng-template>\n        </p-table>\n\n    </div>\n\n</div>","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface Client {\n  id?: number;\n  name?: String;\n  nip?: String;\n  regon?: String;\n  email?: String;\n  phonenumber?: String;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n\n  public allClients: Client[];\n\n  constructor(private http: HttpClient) { }\n\n  getClients(): Observable<Client[]> {\n    return this.http.get<Client[]>(\"api/clients\");\n  }\n  getClient(id): Observable<Client> {\n    return this.http.get<Client>(\"api/client/\" + id);\n  }\n  getCountClient(): Observable<number> {\n    return this.http.get<number>(\"api/client/count\");\n  }\n  addClient(data): Observable<Client> {\n    return this.http.post<Client>(\"api/client\", data);\n  }\n  updateClient(id, data): Observable<Client> {\n    return this.http.put<Client>(\"api/client/\" + id, data);\n  }\n\n  deleteClient(id) {\n    return this.http.delete(\"api/client/\" + id, { responseType: 'text' });\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClientMainComponent } from './client-main/client-main.component';\r\n\r\n\r\nconst routes: Routes = [\r\n\r\n  { path: '', component:  ClientMainComponent},\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContractorRoutingModule { }\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClientMainComponent } from './client-main/client-main.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TableModule } from 'primeng/table';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ToastModule } from 'primeng/toast';\nimport { MessageModule } from 'primeng/message';\nimport { MessagesModule } from 'primeng/messages';\nimport { DialogModule } from 'primeng/dialog';\nimport { FieldsetModule } from 'primeng/fieldset';\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\nimport { MessageService } from 'primeng/api';\nimport { ContractorRoutingModule } from './contractor-routing.module';\nimport { ClientAddFormComponent } from './client-add-form/client-add-form.component'\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { RippleModule } from 'primeng/ripple';\nimport { SharedModule } from '../_shared/shared/shared.module'\n\n\n@NgModule({\n  declarations: [ClientMainComponent, ClientAddFormComponent],\n  imports: [\n    CommonModule,\n    ContractorRoutingModule,\n    MatIconModule,\n    TableModule,\n    FormsModule,\n    DropdownModule,\n    ButtonModule,\n    MatTooltipModule,\n    ToastModule,\n    MessageModule,\n    MessagesModule,\n    DialogModule,\n    FieldsetModule,\n    CodeHighlighterModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    InputTextModule,\n    RippleModule,\n    SharedModule\n  ],\n  providers: [MessageService],\n  entryComponents:[ClientAddFormComponent]\n})\nexport class ContractorModule { }\n"]}