{"version":3,"sources":["webpack:///src/app/contractor/client-add-form/client-add-form.component.ts","webpack:///src/app/contractor/client-add-form/client-add-form.component.html","webpack:///src/app/contractor/client-main/client-main.component.ts","webpack:///src/app/contractor/client-main/client-main.component.html","webpack:///src/app/contractor/client-service/client.service.ts","webpack:///src/app/contractor/contractor-routing.module.ts","webpack:///src/app/contractor/contractor.module.ts"],"names":["ClientAddFormComponent","ref","config","clientService","infoPopup","loading","clientData","data","formClient","id","symfoniaId","shortName","name","validators","required","nip","validatenip","pesel","regon","validateregon9","updateOn","town","street","houseNumber","flatNumber","postalCode","province","country","phonenumber","phonenumber2","email","www","patchValue","close","addClient","value","subscribe","next","res","showSuccessAdd","exit","error","err","showErrorAdd","complete","updateClient","showSuccessUpdate","showErrorUpdate","selector","templateUrl","styleUrls","ClientMainComponent","dialog","auth","confirmationService","client","onErr","clonedclients","loadData","getClients","showErrorDownload","push","getCountClient","clientCount","showErrorCount","dialogRef","open","header","width","onClose","console","log","selected","confirm","message","acceptLabel","rejectLabel","acceptIcon","acceptButtonStyleClass","rejectButtonStyleClass","accept","deleteClient","showSuccessDelete","showErrorDelete","showDialogToAddClient","ClientService","http","get","post","put","responseType","providedIn","routes","path","component","ContractorRoutingModule","forChild","imports","exports","ContractorModule","declarations","providers","entryComponents"],"mappings":"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","file":"contractor-contractor-module-es5.js","sourcesContent":["import { Component, OnInit, Inject } from \"@angular/core\";\nimport { Client, ClientService } from \"../client-service/client.service\";\nimport { InfoPopupComponent } from \"src/app/info-popup/info-popup.component\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { AppValidators } from \"src/app/_validators/AppValidators\";\nimport { DynamicDialogRef, DynamicDialogConfig } from \"primeng/dynamicdialog\";\n\n@Component({\n  selector: \"app-client-add-form\",\n  templateUrl: \"./client-add-form.component.html\",\n  styleUrls: [\"./client-add-form.component.scss\"],\n})\nexport class ClientAddFormComponent implements OnInit {\n  formClient: FormGroup;\n  clientData: Client;\n  loading = false;\n\n  constructor(\n    public ref: DynamicDialogRef,\n    public config: DynamicDialogConfig,\n    private clientService: ClientService,\n    private infoPopup: InfoPopupComponent\n  ) {\n    this.clientData = config.data;\n  }\n\n  ngOnInit() {\n    this.formClient = new FormGroup({\n      id: new FormControl(\"\"),\n      symfoniaId: new FormControl(\"\"),\n      shortName: new FormControl(\"\"),\n      name: new FormControl(\"\", { validators: [Validators.required] }),\n      nip: new FormControl(\"\", { validators: [AppValidators.validatenip] }),\n      pesel: new FormControl(\"\"),\n      regon: new FormControl(\"\", {\n        validators: [AppValidators.validateregon9],\n        updateOn: \"blur\",\n      }),\n\n      town: new FormControl(\"\"),\n      street: new FormControl(\"\"),\n      houseNumber: new FormControl(\"\"),\n      flatNumber: new FormControl(\"\"),\n      postalCode: new FormControl(\"\"),\n      province: new FormControl(\"\"),\n      country: new FormControl(\"\"),\n\n      phonenumber: new FormControl(\"\"),\n      phonenumber2: new FormControl(\"\"),\n      email: new FormControl(\"\", { validators: [Validators.email] }),\n      www: new FormControl(\"\"),\n    });\n\n    if (this.clientData) {\n      this.formClient.patchValue(this.clientData);\n    }\n  }\n\n  exit(id) {\n    this.ref.close(id);\n  }\n\n  addNewClient() {\n    this.loading = true;\n    this.clientService.addClient(this.formClient.value).subscribe({\n      next: (res) => {\n        this.infoPopup.showSuccessAdd(\"klienta\");\n        this.loading = false;\n        this.exit(1);\n      },\n      error: (err) => {\n        this.infoPopup.showErrorAdd(\"klienta\");\n        this.loading = false;\n      },\n      complete: () => {},\n    });\n  }\n\n  updateClient() {\n    this.loading = true;\n    this.clientService\n      .updateClient(this.formClient.value.id, this.formClient.value)\n      .subscribe({\n        next: (res) => {\n          this.infoPopup.showSuccessUpdate(\"klienta\");\n          this.loading = false;\n          this.exit(1);\n        },\n        error: (err) => {\n          this.infoPopup.showErrorUpdate(\"klienta\");\n          this.loading = false;\n        },\n        complete: () => {},\n      });\n  }\n}\n","<div class=\"sb-dialog-content\">\n  <form [formGroup]=\"formClient\" class=\"sb-form\">\n    <div class=\"form-group m-0 p-0\">\n      <div>\n        <p class=\"p-0 m-0\"><b>DANE</b></p>\n      </div>\n      <div class=\"p-fluid p-formgrid p-grid\">\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"name\">Nazwa*</label>\n          <textarea\n            [style]=\"{ width: '100%' }\"\n            pInputTextarea\n            type=\"text\"\n            id=\"name\"\n            [formControl]=\"formClient.get('name')\"\n            required\n          >\n          </textarea>\n          <p\n            class=\"invalid-feedback\"\n            *ngIf=\"\n              formClient.get('name').hasError('required') &&\n              formClient.get('name').touched\n            \"\n          >\n            musi być wypełnione\n          </p>\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"shortName\">Skrócona nazwa</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"shortName\"\n            [formControl]=\"formClient.get('shortName')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"symfoniaId\">Symfonia ID</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"symfoniaId\"\n            [formControl]=\"formClient.get('symfoniaId')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"nip\">NIP*</label>\n          <input\n            [attr.disabled]=\"clientData ? true : null\"\n            pInputText\n            type=\"text\"\n            id=\"nip\"\n            [formControl]=\"formClient.get('nip')\"\n            autocomplete=\"off\"\n          />\n          <p\n            class=\"invalid-feedback\"\n            *ngIf=\"\n              formClient.get('nip').hasError('nipFormat') &&\n              formClient.get('nip').touched\n            \"\n          >\n            niepoprawny nip\n          </p>\n        </div>\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"regon\">REGON</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"regon\"\n            [formControl]=\"formClient.get('regon')\"\n            autocomplete=\"off\"\n          />\n          <p\n            class=\"invalid-feedback\"\n            *ngIf=\"\n              formClient.get('regon').hasError('regonFormat') &&\n              formClient.get('regon').touched\n            \"\n          >\n            niepoprawny regon\n          </p>\n        </div>\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"pesel\">PESEL</label>\n          <input\n            [attr.disabled]=\"clientData ? true : null\"\n            pInputText\n            type=\"text\"\n            id=\"pesel\"\n            [formControl]=\"formClient.get('pesel')\"\n            autocomplete=\"off\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div>\n        <p class=\"mb-0 mt-4\"><b>ADRES</b></p>\n      </div>\n      <div class=\"p-fluid p-formgrid p-grid\">\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"town\">Miasto</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"town\"\n            [formControl]=\"formClient.get('town')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"street\">Ulica</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"street\"\n            [formControl]=\"formClient.get('street')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-2 mb-0 pb-0\" style=\"padding: 0.5rem\">\n          <label class=\"mb-0\" for=\"houseNumber\">Numer budynku</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"houseNumber\"\n            [formControl]=\"formClient.get('houseNumber')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-2 mb-0 pb-0\" style=\"padding: 0.5rem\">\n          <label class=\"mb-0\" for=\"flatNumber\">Numer mieszkania</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"flatNumber\"\n            [formControl]=\"formClient.get('flatNumber')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"postalCode\">Kod Pocztowy</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"postalCode\"\n            [formControl]=\"formClient.get('postalCode')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"province\">Województwo</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"province\"\n            [formControl]=\"formClient.get('province')\"\n            autocomplete=\"off\"\n          />\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"country\">Kraj</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"country\"\n            [formControl]=\"formClient.get('country')\"\n            autocomplete=\"off\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div>\n        <p class=\"mb-0 mt-4\"><b>DANE KONTAKTOWE</b></p>\n      </div>\n\n      <div class=\"p-fluid p-formgrid p-grid\">\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"email\">EMAIL</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"email\"\n            [formControl]=\"formClient.get('email')\"\n            autocomplete=\"off\"\n          />\n          <p\n            class=\"invalid-feedback\"\n            *ngIf=\"\n              formClient.get('email').hasError('email') &&\n              formClient.get('email').touched\n            \"\n          >\n            niepoprawny email\n          </p>\n        </div>\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"phonenumber\">Numer telefonu</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"phonenumber\"\n            [formControl]=\"formClient.get('phonenumber')\"\n            autocomplete=\"off\"\n          />\n          <p\n            class=\"invalid-feedback\"\n            *ngIf=\"\n              formClient.get('phonenumber').hasError('minLength') &&\n              formClient.get('phonenumber').touched\n            \"\n          >\n            niepoprawny numer telefonu\n          </p>\n        </div>\n\n        <div class=\"p-field p-col-4 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"phonenumber2\">Numer telefonu 2</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"phonenumber2\"\n            [formControl]=\"formClient.get('phonenumber2')\"\n            autocomplete=\"off\"\n          />\n          <p\n            class=\"invalid-feedback\"\n            *ngIf=\"\n              formClient.get('phonenumber2').hasError('minLength') &&\n              formClient.get('phonenumber2').touched\n            \"\n          >\n            niepoprawny numer telefonu\n          </p>\n        </div>\n      </div>\n      <div class=\"p-fluid p-formgrid p-grid\">\n        <div class=\"p-field p-col-12 mb-0 pb-0\">\n          <label class=\"mb-0\" for=\"www\">WWW</label>\n          <input\n            pInputText\n            type=\"text\"\n            id=\"www\"\n            [formControl]=\"formClient.get('www')\"\n            autocomplete=\"off\"\n          />\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"sb-dialog-footer\">\n  <div class=\"sb-btn-close\">\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      (click)=\"exit(0)\"\n      pTooltip=\"Anulowanie operacji\"\n      label=\"Anuluj\"\n      icon=\"pi pi-times\"\n      class=\"p-button-sm sb-button o-gray\"\n    ></button>\n  </div>\n  <div class=\"sb-btn-save\">\n    <button\n      *ngIf=\"!clientData\"\n      [disabled]=\"formClient.invalid || loading\"\n      pButton\n      pRipple\n      type=\"button\"\n      (click)=\"addNewClient()\"\n      pTooltip=\"Dodaj nowego kontrahenta\"\n      label=\"Zapisz\"\n      icon=\"pi pi-check\"\n      class=\"p-button-sm sb-button green\"\n    ></button>\n\n    <button\n      *ngIf=\"clientData\"\n      [disabled]=\"formClient.invalid || loading\"\n      pButton\n      pRipple\n      type=\"button\"\n      (click)=\"updateClient()\"\n      pTooltip=\"Aktualizacja kontrahenta\"\n      label=\"Zapisz\"\n      icon=\"pi pi-check\"\n      class=\"p-button-sm sb-button green\"\n    ></button>\n\n    <p-progressSpinner\n      *ngIf=\"loading\"\n      [style]=\"{ width: '25px', height: '25px' }\"\n      styleClass=\"custom-spinner\"\n      strokeWidth=\"8\"\n      fill=\"#EEEEEE\"\n      animationDuration=\".5s\"\n    ></p-progressSpinner>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Client, ClientService } from \"../client-service/client.service\";\nimport { SelectItem, ConfirmationService } from \"primeng/api\";\nimport { InfoPopupComponent } from \"src/app/info-popup/info-popup.component\";\nimport { AuthService } from \"src/app/_services/auth.service\";\nimport { ClientAddFormComponent } from \"../client-add-form/client-add-form.component\";\nimport { DialogService } from \"primeng/dynamicdialog\";\n\n@Component({\n  selector: \"app-client-main\",\n  templateUrl: \"./client-main.component.html\",\n  styleUrls: [\"./client-main.component.scss\"],\n})\nexport class ClientMainComponent implements OnInit {\n  client: Client[] = [];\n\n  onErr: Client = {\n    id: 0,\n    name: \"---\",\n    nip: \"---\",\n    regon: \"---\",\n    email: \"---\",\n    phonenumber: \"---\",\n  };\n  clientCount: number;\n  err: boolean;\n  newclient: boolean;\n  available: SelectItem[];\n  clonedclients: { [s: string]: Client } = {};\n  loading = false;\n  selectedClient: any;\n\n  constructor(\n    public dialog: DialogService,\n    public auth: AuthService,\n    private clientService: ClientService,\n    private infoPopup: InfoPopupComponent,\n    private confirmationService: ConfirmationService\n  ) {}\n\n  ngOnInit() {\n    this.err = false;\n    this.loadData();\n  }\n\n  loadData() {\n    this.loading = true;\n    this.clientService.getClients().subscribe({\n      next: (res) => {\n        this.client = res;\n        this.err = false;\n      },\n      error: (err) => {\n        this.infoPopup.showErrorDownload(\"kontrahenci\");\n        this.err = true;\n        this.client.push(this.onErr);\n      },\n      complete: () => {\n        this.loading = false;\n      },\n    });\n\n    this.clientService.getCountClient().subscribe({\n      next: (res) => {\n        this.clientCount = res;\n      },\n      error: (err) => {\n        this.infoPopup.showErrorCount(\"klientów\");\n      },\n      complete: () => {},\n    });\n  }\n\n  showDialogToAddClient() {\n    const dialogRef = this.dialog.open(ClientAddFormComponent, {\n      header: \"Nowy kontrahent\",\n      width: \"1000px\",\n    });\n\n    dialogRef.onClose.subscribe((res) => {\n      if (res) {\n        this.loadData();\n      }\n      console.log(\"The dialog client add was closed\");\n    });\n  }\n\n  showDialogToUpdateClient(selected) {\n    const dialogRef = this.dialog.open(ClientAddFormComponent, {\n      header: \"Aktualizacja kontrahenta\",\n      width: \"1000px\",\n      data: selected,\n    });\n\n    dialogRef.onClose.subscribe((res) => {\n      if (res) {\n        this.loadData();\n      }\n      console.log(\"The dialog update client was closed\");\n    });\n  }\n\n  onRowDeleteClient(client: Client) {\n    this.confirmationService.confirm({\n      message: \"Na pewno chcesz usunąć \" + client.name + \"?\",\n      acceptLabel: \"Tak\",\n      rejectLabel: \"Nie\",\n      acceptIcon: \"pi pi-trash\",\n      acceptButtonStyleClass: \"p-button-sm sb-button red\",\n      rejectButtonStyleClass: \"p-button-sm sb-button o-gray\",\n      accept: () => {\n        this.clientService.deleteClient(client.id).subscribe({\n          next: (res) => {\n            this.infoPopup.showSuccessDelete(\"klienta\");\n          },\n          error: (err) => {\n            this.infoPopup.showErrorDelete(\"klient\");\n          },\n          complete: () => {\n            this.loadData();\n          },\n        });\n      },\n    });\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-lg-3 col-md-6 col-sm-6 p-0\">\n    <div class=\"card-stats\">\n      <div class=\"card-content\">\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-5\">\n              <div class=\"big-icon\">\n                <i class=\"pi pi-id-card\"></i>\n              </div>\n            </div>\n            <div class=\"col-7 pr-0\">\n              <div class=\"numbers\">\n                <p class=\"card-category\">Kontrahenci</p>\n                <p class=\"card-title\">{{ clientCount }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"card-footer\">\n          <div class=\"stats-bar\">\n            <div class=\"small-icon\">\n              <i class=\"pi pi-chart-bar\"></i>\n            </div>\n            <div class=\"stats-bar-button\">\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                (click)=\"showDialogToAddClient()\"\n                pTooltip=\"Dodanie nowej pozycji\"\n                icon=\"pi pi-plus\"\n                class=\"p-button-sm sb-button blue\"\n              ></button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <p-table\n      #ct\n      styleClass=\"p-datatable-striped\"\n      selectionMode=\"single\"\n      [value]=\"client\"\n      [loading]=\"loading\"\n      dataKey=\"id\"\n      editMode=\"row\"\n      sortMode=\"multiple\"\n      [paginator]=\"true\"\n      [rows]=\"10\"\n      [rowsPerPageOptions]=\"[10, 20, 50]\"\n      [showCurrentPageReport]=\"true\"\n      currentPageReportTemplate=\"{first} do {last} z {totalRecords}\"\n      [filterDelay]=\"0\"\n      [autoLayout]=\"true\"\n      selectionMode=\"single\"\n      [(selection)]=\"selectedClient\"\n      [globalFilterFields]=\"[\n        'name',\n        'nip',\n        'pesel',\n        'shortName',\n        'phonenumber'\n      ]\"\n      [rowHover]=\"true\"\n      columnResizeMode=\"expand\"\n    >\n      <ng-template pTemplate=\"caption\">\n        <div class=\"row\">\n          <div class=\"col\"><span>Lista Kontrahentów</span></div>\n          <div class=\"col\" style=\"text-align: end\">\n            <input\n              pInputText\n              class=\"p-inputtext\"\n              type=\"text\"\n              (input)=\"ct.filterGlobal($event.target.value, 'contains')\"\n              placeholder=\"Wyszukiwarka\"\n            />\n          </div>\n        </div>\n      </ng-template>\n      <ng-template pTemplate=\"header\">\n        <tr class=\"cl-header\">\n          <th pTooltip=\"symfonia ID\">\n            <div>symf. ID</div>\n          </th>\n          <th pSortableColumn=\"shortName\">\n            <div>Skrót nazwa<p-sortIcon field=\"shortName\"></p-sortIcon></div>\n          </th>\n          <th pSortableColumn=\"name\">\n            <div>Nazwa <p-sortIcon field=\"name\"></p-sortIcon></div>\n          </th>\n          <th pSortableColumn=\"town\">\n            <div>Miasto <p-sortIcon field=\"town\"></p-sortIcon></div>\n          </th>\n          <th>\n            <div>Ulica</div>\n          </th>\n          <th>\n            <div>Nr. budynku</div>\n          </th>\n          <th>\n            <div>Nr. mieszkania</div>\n          </th>\n          <th>\n            <div>Kod pocztowy</div>\n          </th>\n          <th>\n            <div>Województwo</div>\n          </th>\n          <th>\n            <div>Kraj</div>\n          </th>\n          <th>\n            <div>nr. tel.</div>\n          </th>\n          <th>\n            <div>nr. tel. 2</div>\n          </th>\n          <th>\n            <div>email</div>\n          </th>\n          <th>\n            <div>nip</div>\n          </th>\n          <th>\n            <div>pesel</div>\n          </th>\n          <th>\n            <div>regon</div>\n          </th>\n          <th>\n            <div>www</div>\n          </th>\n          <th style=\"min-width: 80px\"></th>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate=\"body\" let-rowData let-ri=\"rowIndex\">\n        <tr class=\"cl-body\" [pSelectableRow]=\"rowData\">\n          <td>{{ rowData.symfoniaId }}</td>\n          <td>{{ rowData.shortName }}</td>\n          <td>{{ rowData.name }}</td>\n          <td>{{ rowData.town }}</td>\n          <td>{{ rowData.street }}</td>\n          <td>{{ rowData.houseNumber }}</td>\n          <td>{{ rowData.flatNumber }}</td>\n          <td>{{ rowData.postalCode }}</td>\n          <td>{{ rowData.province }}</td>\n          <td>{{ rowData.country }}</td>\n          <td style=\"min-width: 110px\">{{ rowData.phonenumber }}</td>\n          <td style=\"min-width: 110px\">{{ rowData.phonenumber2 }}</td>\n          <td>{{ rowData.email }}</td>\n          <td style=\"min-width: 110px\">{{ rowData.nip }}</td>\n          <td>{{ rowData.pesel }}</td>\n          <td>{{ rowData.regon }}</td>\n          <td>{{ rowData.www }}</td>\n\n          <td class=\"edit-col\">\n            <div class=\"d-flex justify-content-center\">\n              <button\n                pButton\n                pRipple\n                appPermission\n                permission=\"catalogWrite\"\n                type=\"button\"\n                (click)=\"showDialogToUpdateClient(rowData)\"\n                icon=\"pi pi-pencil\"\n                class=\"p-button-sm sb-button blue\"\n              ></button>\n\n              <button\n                pButton\n                pRipple\n                appPermission\n                permission=\"catalogDelete\"\n                type=\"button\"\n                (click)=\"onRowDeleteClient(rowData)\"\n                icon=\"pi pi-trash\"\n                class=\"p-button-sm ml-1 sb-button red\"\n              ></button>\n            </div>\n          </td>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate=\"emptymessage\">\n        <tr>\n          <td colspan=\"18\" style=\"text-align: left\">Brak danych.</td>\n        </tr>\n      </ng-template>\n    </p-table>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\n\nexport interface Client {\n  id?: number;\n  symfoniaId?: number;\n  shortName?: string;\n  name?: string;\n  town?: string;\n  street?: string;\n  houseNumber?: string;\n  flatNumber?: string;\n  postalCode?: string;\n  province?: string;\n  country?: string;\n  phonenumber?: string;\n  phonenumber2?: string;\n  email?: string;\n  nip?: string;\n  pesel?: string;\n  regon?: string;\n  www?: string;\n\n  helper_pcv_mEasyTo50?: number;\n  helper_pcv_mEasyTo150?: number;\n  helper_pcv_mEasyTo500?: number;\n  helper_pcv_mEasyAbove500?: number;\n  helper_pcv_mHardTo50?: number;\n  helper_pcv_mHardTo150?: number;\n  helper_pcv_mHardTo500?: number;\n  helper_pcv_mHardAbove500?: number;\n\n  helper_alu_mEasyTo50?: number;\n  helper_alu_mEasyTo150?: number;\n  helper_alu_mEasyTo500?: number;\n  helper_alu_mEasyAbove500?: number;\n  helper_alu_mHardTo50?: number;\n  helper_alu_mHardTo150?: number;\n  helper_alu_mHardTo500?: number;\n  helper_alu_mHardAbove500?: number;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ClientService {\n  public allClients: Client[];\n\n  constructor(private http: HttpClient) {}\n\n  getClients(): Observable<Client[]> {\n    return this.http.get<Client[]>(\"api/clients\");\n  }\n  getClient(id): Observable<Client> {\n    return this.http.get<Client>(\"api/client/\" + id);\n  }\n  getCountClient(): Observable<number> {\n    return this.http.get<number>(\"api/client/count\");\n  }\n  addClient(data): Observable<Client> {\n    return this.http.post<Client>(\"api/client\", data);\n  }\n  updateClient(id, data): Observable<Client> {\n    return this.http.put<Client>(\"api/client/\" + id, data);\n  }\n\n  deleteClient(id) {\n    return this.http.delete(\"api/client/\" + id, { responseType: \"text\" });\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClientMainComponent } from './client-main/client-main.component';\r\n\r\n\r\nconst routes: Routes = [\r\n\r\n  { path: '', component:  ClientMainComponent},\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContractorRoutingModule { }\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClientMainComponent } from './client-main/client-main.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TableModule } from 'primeng/table';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\nimport { ToastModule } from 'primeng/toast';\nimport { MessageModule } from 'primeng/message';\nimport { MessagesModule } from 'primeng/messages';\nimport { DialogModule } from 'primeng/dialog';\nimport { FieldsetModule } from 'primeng/fieldset';\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\nimport { MessageService } from 'primeng/api';\nimport { ContractorRoutingModule } from './contractor-routing.module';\nimport { ClientAddFormComponent } from './client-add-form/client-add-form.component'\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { RippleModule } from 'primeng/ripple';\nimport { SharedModule } from '../_shared/shared/shared.module'\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { DialogService } from 'primeng/dynamicdialog';\nimport { TooltipModule } from 'primeng/tooltip';\n\n\n@NgModule({\n  declarations: [ClientMainComponent, ClientAddFormComponent],\n  imports: [\n    CommonModule,\n    ContractorRoutingModule,\n    MatIconModule,\n    TableModule,\n    FormsModule,\n    DropdownModule,\n    ButtonModule,\n    ToastModule,\n    MessageModule,\n    MessagesModule,\n    DialogModule,\n    FieldsetModule,\n    CodeHighlighterModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    InputTextModule,\n    RippleModule,\n    SharedModule,\n    ProgressSpinnerModule,\n    TooltipModule\n  ],\n  providers: [MessageService,DialogService],\n  entryComponents:[ClientAddFormComponent]\n})\nexport class ContractorModule { }\n"]}