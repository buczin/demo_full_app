{"version":3,"sources":["webpack:///src/app/_class/user.ts","webpack:///src/app/settings/mycompany/form-mycompany/form-mycompany.component.ts","webpack:///src/app/settings/mycompany/form-mycompany/form-mycompany.component.html","webpack:///src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.ts","webpack:///src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.html","webpack:///src/app/settings/mycompany/mycompany.component.ts","webpack:///src/app/settings/mycompany/mycompany.component.html","webpack:///src/app/settings/settings-main/settings-main.component.ts","webpack:///src/app/settings/settings-main/settings-main.component.html","webpack:///src/app/settings/settings-routing.module.ts","webpack:///src/app/settings/settings.module.ts","webpack:///src/app/settings/settings.service.ts","webpack:///src/app/settings/users/form-password/form-password.component.ts","webpack:///src/app/settings/users/form-password/form-password.component.html","webpack:///src/app/settings/users/form-users/form-users.component.ts","webpack:///src/app/settings/users/form-users/form-users.component.html","webpack:///src/app/settings/users/form-userupdate/form-userupdate.component.ts","webpack:///src/app/settings/users/form-userupdate/form-userupdate.component.html","webpack:///src/app/settings/users/users.component.ts","webpack:///src/app/settings/users/users.component.html"],"names":["User","FormMycompanyComponent","dialogRef","settingService","infoPopup","formMyCompany","name","validators","required","nip","validatenip","asyncValidators","myCompanyExists","updateOn","regon","validateregon9","contactemail","email","fvemail","phonenumber","minLength","pattern","logoLink","close","addMyCompany","value","subscribe","next","res","showSuccessAdd","error","err","showErrorAdd","complete","onNoClick","onAddMyCompany","selector","templateUrl","styleUrls","FormUpdateMyCompanyComponent","company","formUpdateMyCompany","patchValue","updateMyCompany","id","showSuccessUpdate","console","log","showErrorUpdate","onUpdateMyCompany","MycompanyComponent","location","dialog","confirmationService","loadData","getMyCompanies","mycompanies","showErrorDownload","open","width","afterClosed","result","data","back","confirm","message","acceptLabel","rejectLabel","accept","deleteMyCompany","showSuccessDelete","showErrorDelete","backClicked","openDialogAdd","SettingsMainComponent","routes","path","component","SettingsRoutingModule","forChild","imports","exports","SettingsModule","declarations","entryComponents","SettingsService","http","get","post","put","responseType","providedIn","FormPasswordComponent","user","info","fb","formPassword","group","password","confirmPassword","validator","nomatch","changePassword","onChangePass","FormUsersComponent","color","formUser","username","active","role","addUser","onAddUser","FormUserupdateComponent","formUserUpdate","updateUser","onUpdateUser","UsersComponent","getUsers","users","usr","deleteUser"],"mappings":"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","file":"settings-settings-module-es5.js","sourcesContent":["export class User {\r\n    id: number;\r\n    username: string;\r\n    password: string;\r\n    name: string;\r\n    authdata: User;\r\n  authorities: any;\r\n}","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AppValidators } from 'src/app/_validators/AppValidators';\nimport { SettingsService } from '../../settings.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\n\n@Component({\n  selector: 'app-form-mycompany',\n  templateUrl: './form-mycompany.component.html',\n  styleUrls: ['./form-mycompany.component.scss']\n})\nexport class FormMycompanyComponent implements OnInit {\n\n  formMyCompany: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<FormMycompanyComponent>,\n    private settingService: SettingsService,\n    private infoPopup: InfoPopupComponent\n    ) { }\n\n  ngOnInit(): void {\n    this.formMyCompany = new FormGroup({\n      name: new FormControl('', { validators: [Validators.required] }),\n      nip: new FormControl('', { validators: [Validators.required, AppValidators.validatenip], asyncValidators: [AppValidators.myCompanyExists], updateOn: 'blur' }),\n      regon: new FormControl('', { validators: [AppValidators.validateregon9], updateOn: 'blur' }),\n      contactemail: new FormControl('', {validators: [Validators.email]}),\n      fvemail: new FormControl('', {validators: [Validators.email]}),\n      phonenumber: new FormControl('',{validators: [Validators.minLength(9),Validators.pattern(\"^[0-9]*$\")]}),\n      logoLink: new FormControl(''),\n    })\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  onAddMyCompany(){\n    this.settingService.addMyCompany(this.formMyCompany.value).subscribe({\n      next: (res) =>{\n        this.infoPopup.showSuccessAdd(\"moja firma\");\n        this.dialogRef.close();\n      },\n      error: (err) =>{\n          this.infoPopup.showErrorAdd(\"moja firma\");\n      },\n      complete: () =>{}\n    })\n  }\n\n}\n","<form [formGroup]=\"formMyCompany\">\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Nazwa</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('name')\" autofocus type=\"text\" id=\"name\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Nazwa firmy\"\r\n                required autocomplete=\"off\" autofocus>\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('name').hasError('required') && formMyCompany.get('name').touched\">\r\n                musi być wypełnione\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"nip\" class=\"col-sm-3 col-form-label\">NIP</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('nip')\" type=\"text\" id=\"nip\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"NIP\" required\r\n                autocomplete=\"off\">\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('nip').hasError('required') && formMyCompany.get('nip').touched\">\r\n                musi być wypełnione\r\n            </p>\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('nip').hasError('nipFormat') && formMyCompany.get('nip').touched\">\r\n                niepoprawny nip\r\n            </p>\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('nip').hasError('mycompanyExists') && formMyCompany.get('nip').touched\">\r\n                ten numer znajduje się na liście\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"regon\" class=\"col-sm-3 col-form-label\">REGON</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('regon')\" type=\"text\" id=\"regon\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"REGON\"\r\n                autocomplete=\"off\">\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('regon').hasError('regonFormat') && formMyCompany.get('regon').touched\">\r\n                niepoprawny regon\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"contactemail\" class=\"col-sm-3 col-form-label\">EMAIL główny</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('contactemail')\" type=\"text\" id=\"contactemail\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\"\r\n                placeholder=\"Adres email głowny\" autocomplete=\"off\">\r\n        </div>\r\n        <p class=\"invalid-feedback\"\r\n            *ngIf=\"formMyCompany.get('contactemail').hasError('contactemail') && formMyCompany.get('contactemail').touched\">\r\n            niepoprawny email\r\n        </p>\r\n    </div>\r\n\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"fvemail\" class=\"col-sm-3 col-form-label\">EMAIL faktura</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('fvemail')\" type=\"text\" id=\"fvemail\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Adres fv email\"\r\n                autocomplete=\"off\">\r\n        </div>\r\n        <p class=\"invalid-feedback\"\r\n            *ngIf=\"formMyCompany.get('fvemail').hasError('fvemail') && formMyCompany.get('fvemail').touched\">\r\n            niepoprawny email\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"phonenumber\" class=\"col-sm-3 col-form-label\">Numer telefonu</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('phonenumber')\" type=\"text\" id=\"phonenumber\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"numer tel.\"\r\n                autocomplete=\"off\">\r\n        </div>\r\n        <p class=\"invalid-feedback\"\r\n            *ngIf=\"formMyCompany.get('phonenumber').hasError('minLength') && formMyCompany.get('phonenumber').touched\">\r\n            niepoprawny numer telefonu\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"logoLink\" class=\"col-sm-3 col-form-label\">Logo link</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('logoLink')\" type=\"text\" id=\"logoLink\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Link do loga firmy\"\r\n                autocomplete=\"off\">\r\n        </div>\r\n    </div>\r\n\r\n</form>\r\n<hr>\r\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\r\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie dodawania\" matTooltipClass=\"tooltip-red\"\r\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\r\n    <button [disabled]=\"formMyCompany.invalid\" matTooltip=\"Dodaj firmę\" matTooltipClass=\"tooltip-green\"\r\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onAddMyCompany()\"\r\n        label=\"Zapisz\"></button>\r\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from '../../settings.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { AppValidators } from 'src/app/_validators/AppValidators';\n\n@Component({\n  selector: 'app-form-update-my-company',\n  templateUrl: './form-update-my-company.component.html',\n  styleUrls: ['./form-update-my-company.component.scss']\n})\nexport class FormUpdateMyCompanyComponent implements OnInit {\n\n  formUpdateMyCompany: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<FormUpdateMyCompanyComponent>,\n    private settingService: SettingsService,\n    @Inject(MAT_DIALOG_DATA) public company: any,\n    private infoPopup: InfoPopupComponent\n    ) { }\n\n  ngOnInit() {\n    this.formUpdateMyCompany = new FormGroup({\n      name: new FormControl('', { validators: [Validators.required] }),\n      regon: new FormControl('', { validators: [AppValidators.validateregon9], updateOn: 'blur' }),\n      contactemail: new FormControl('', {validators: [Validators.email]}),\n      fvemail: new FormControl('', {validators: [Validators.email]}),\n      phonenumber: new FormControl('',{validators: [Validators.minLength(9),Validators.pattern(\"^[0-9]*$\")]}),\n      logoLink: new FormControl('')\n    });\n    this.formUpdateMyCompany.patchValue(this.company);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  onUpdateMyCompany(){\n    this.settingService.updateMyCompany(this.company.id,this.formUpdateMyCompany.value).subscribe({\n      next: (res) =>{\n        this.infoPopup.showSuccessUpdate(\"moja firma\");\n        this.dialogRef.close();\n      },\n      error: (err) =>{\n        console.log(err);\n          this.infoPopup.showErrorUpdate(\"moja firma\");\n      },\n      complete: () =>{}\n    })\n  }\n\n}\n\n","<form [formGroup]=\"formUpdateMyCompany\">\n\n    <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Nazwa</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('name')\" type=\"text\" id=\"name\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Nazwa firmy\"\n                required autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('name').hasError('required') && formUpdateMyCompany.get('name').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"regon\" class=\"col-sm-3 col-form-label\">REGON</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('regon')\" type=\"text\" id=\"regon\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"REGON\"\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('regon').hasError('regonFormat') && formUpdateMyCompany.get('regon').touched\">\n                niepoprawny regon\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"contactemail\" class=\"col-sm-3 col-form-label\">EMAIL główny</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('contactemail')\" type=\"text\" id=\"contactemail\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\"\n                placeholder=\"Adres email głowny\" autocomplete=\"off\">\n\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('contactemail').hasError('email') && formUpdateMyCompany.get('contactemail').touched\">\n                niepoprawny email\n            </p>\n        </div>\n    </div>\n\n\n    <div class=\"form-group row\">\n        <label for=\"fvemail\" class=\"col-sm-3 col-form-label\">EMAIL faktura</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('fvemail')\" type=\"text\" id=\"fvemail\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Adres fv email\"\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('fvemail').hasError('email') && formUpdateMyCompany.get('fvemail').touched\">\n                niepoprawny email\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"phonenumber\" class=\"col-sm-3 col-form-label\">Numer telefonu</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('phonenumber')\" type=\"text\" id=\"phonenumber\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"numer tel.\"\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('phonenumber').hasError('minLength') && formUpdateMyCompany.get('phonenumber').touched\">\n                niepoprawny numer telefonu\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"logoLink\" class=\"col-sm-3 col-form-label\">Logo link</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('logoLink')\" type=\"text\" id=\"logoLink\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Link do loga firmy\"\n                autocomplete=\"off\">\n        </div>\n    </div>\n\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie dodawania\" matTooltipClass=\"tooltip-red\"\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button matTooltip=\"Aktualizuj firmę\" matTooltipClass=\"tooltip-green\" class=\"ml-1 ui-button-success\" type=\"button\"\n        pButton icon=\"pi pi-check\" (click)=\"onUpdateMyCompany()\" label=\"Zapisz\"\n        ></button>\n</div>\n<!-- [disabled]=\"formUpdateMyCompany.invalid\" -->","import { Component, OnInit } from '@angular/core';\nimport { SettingsService } from '../settings.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { FormMycompanyComponent } from './form-mycompany/form-mycompany.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport {Location, LocationStrategy, PathLocationStrategy} from '@angular/common';\nimport { ConfirmationService } from 'primeng/api';\nimport { FormUpdateMyCompanyComponent } from './form-update-my-company/form-update-my-company.component';\n\n@Component({\n  selector: 'app-mycompany',\n  templateUrl: './mycompany.component.html',\n  styleUrls: ['./mycompany.component.scss']\n})\nexport class MycompanyComponent implements OnInit {\n\n  mycompanies: any;\n\n  constructor(\n    private location: Location,\n    public dialog: MatDialog, \n    private settingService: SettingsService,\n    private infoPopup: InfoPopupComponent,\n    private confirmationService: ConfirmationService\n    ) { }\n\n  ngOnInit() {\n    this.loadData();\n  }\n\n  loadData(){\n    this.settingService.getMyCompanies().subscribe({\n      next: (res) =>{\n          this.mycompanies = res;\n      },\n      error: (err) => {\n        this.infoPopup.showErrorDownload(\"firm\")\n      },\n      complete: ()=> {\n\n      }\n      \n    })\n  }\n\n  openDialogAdd(): void {\n    const dialogRef = this.dialog.open(FormMycompanyComponent, {\n      width: '450px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog was closed');\n    });\n  }\n\n  onEditMyCompany(company){\n    const dialogRef = this.dialog.open(FormUpdateMyCompanyComponent, {\n      data: company,\n      width: '450px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog was closed');\n    });\n  }\n\n  backClicked() {\n    this.location.back();\n  }\n\n  onDeleteMyCompant(company){\n    this.confirmationService.confirm({\n      message: 'Na pewno chcesz usunąć '+ company.name + '?',\n      acceptLabel:'Tak',\n      rejectLabel:'Nie',\n      accept: () => {\n        this.settingService.deleteMyCompany(company.id).subscribe(\n          {\n            next: (res) => {\n              this.infoPopup.showSuccessDelete(\"moja firma\");\n            },\n            error: (err) => {\n              this.infoPopup.showErrorDelete(\"moja firma\");\n            },\n            complete: () => {\n              this.loadData();\n            }\n          }\n        )\n      }\n    });\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"row mb-2 ml-0\">\n        <button (click)=\"backClicked()\" mat-raised-button><i class=\"pi pi-chevron-left\"></i></button>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-2\">\n            <div class=\"bg-white shadow-sm w-100 h-100 p-2 rounded\" style=\"text-align: center;\">\n                <button class=\"w-100\" mat-raised-button color=\"primary\"\n                    (click)=\"openDialogAdd()\">Dodaj firmę</button>\n            </div>\n        </div>\n        <div class=\"col-10\">\n            <div class=\"row\">\n                <p-table #mc [value]=\"mycompanies\" dataKey=\"id\" [filterDelay]=\"0\" [globalFilterFields]=\"['name']\" [resizableColumns]=\"true\" columnResizeMode=\"expand\">\n                    <ng-template pTemplate=\"caption\">\n                        Moje Firmy\n                        <div class=\"ui-table-globalfilter-container\">\n                            <input pInputText type=\"text\" (input)=\"mc.filterGlobal($event.target.value, 'contains')\"\n                                placeholder=\"Wyszukiwarka\" />\n                        </div>\n                    </ng-template>\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <th style=\"width: 40px;\">ID</th>\n                            <th pResizableColumn>Nazwa</th>\n                            <th pResizableColumn>NIP</th>\n                            <th pResizableColumn>REGON</th>\n                            <th pResizableColumn>Email firmy</th>\n                            <th pResizableColumn>Email FV</th>\n                            <th pResizableColumn>Nr. Tel.</th>\n                            <th pResizableColumn>Logo</th>\n                            <th style=\"width:8em\"></th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-rowData>\n                        <tr>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.id}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.name}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.nip}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.regon}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.contactemail}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.fvemail}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.phonenumber}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.logoLink}}\n                            </td>\n                            <td style=\"text-align:center\">\n                                <button matTooltip=\"Edycja firmy\" matTooltipClass=\"tooltip-red\" pButton type=\"button\"\n                                    icon=\"pi pi-pencil\" class=\"ui-button-info edit-button\"\n                                    (click)=\"onEditMyCompany(rowData)\"></button>\n                                <button matTooltip=\"Usuwanie\" matTooltipClass=\"tooltip-red\" pButton type=\"button\"\n                                    icon=\"pi pi-times\" class=\"ml-2 ui-button-info remove-button\"\n                                    (click)=\"onDeleteMyCompant(rowData)\"></button>\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\">\n                        <tr>\n                            <td colspan=\"8\" style=\"text-align:left\">Brak danych.</td>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-settings-main',\n  templateUrl: './settings-main.component.html',\n  styleUrls: ['./settings-main.component.scss']\n})\nexport class SettingsMainComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <a [routerLink]=\"['users']\">\n                <div class=\"card\" style=\"width: 18rem;\">\n                    <div class=\"card-body\">\n                        <div class=\"d-flex flex-row\">\n                            <i class=\"pi pi-users\"></i>\n                            <p class=\"card-text w-100 text-right\">Użytkownicy</p>\n                        </div>\n                    </div>\n                </div>\n            </a>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <a [routerLink]=\"['mojafirma']\">\n                <div class=\"card\" style=\"width: 18rem;\">\n                    <div class=\"card-body\">\n                        <div class=\"d-flex flex-row\">\n                            <i class=\"pi pi-home\"></i>\n                            <p class=\"card-text w-100 text-right\">Moje Firmy</p>\n                        </div>\n                    </div>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SettingsMainComponent } from './settings-main/settings-main.component';\nimport { UsersComponent } from './users/users.component';\nimport { MycompanyComponent } from './mycompany/mycompany.component';\n\n\nconst routes: Routes = [\n  { path: '', component: SettingsMainComponent},\n  { path: 'users', component: UsersComponent},\n  { path: 'mojafirma', component: MycompanyComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { SettingsMainComponent } from './settings-main/settings-main.component';\nimport { UsersComponent } from './users/users.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TableModule } from 'primeng/table';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { DialogModule } from 'primeng/dialog';\nimport { FieldsetModule } from 'primeng/fieldset';\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\nimport { TabViewModule } from 'primeng/tabview';\nimport { MycompanyComponent } from './mycompany/mycompany.component';\nimport { FormMycompanyComponent } from './mycompany/form-mycompany/form-mycompany.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FormUsersComponent } from './users/form-users/form-users.component';\nimport {PasswordModule} from 'primeng/password';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport { FormPasswordComponent } from './users/form-password/form-password.component';\nimport { FormUserupdateComponent } from './users/form-userupdate/form-userupdate.component';\nimport { FormUpdateMyCompanyComponent } from './mycompany/form-update-my-company/form-update-my-company.component';\n\n@NgModule({\n  declarations: [SettingsMainComponent, UsersComponent, MycompanyComponent, FormMycompanyComponent, FormUsersComponent, FormPasswordComponent, FormUserupdateComponent, FormUpdateMyCompanyComponent],\n  imports: [\n    CommonModule,\n    SettingsRoutingModule,\n    MatIconModule,\n    MatButtonModule,\n    TableModule,\n    FormsModule,\n    DropdownModule,\n    ButtonModule,\n    MatTooltipModule,\n    DialogModule,\n    FieldsetModule,\n    CodeHighlighterModule,\n    ReactiveFormsModule,\n    TabViewModule,\n    MatDialogModule,\n    PasswordModule,\n    MatSlideToggleModule\n  ],\n  entryComponents: [FormUpdateMyCompanyComponent,FormUserupdateComponent,FormPasswordComponent,FormUsersComponent,FormMycompanyComponent]\n})\nexport class SettingsModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n\n  constructor(private http: HttpClient) { }\n\n  // =============== USERS ============\n  getUsers(): Observable<any[]> {\n    return this.http.get<any[]>(\"api/users\");\n  }\n  addUser(data): Observable<any> {\n    return this.http.post<any>(\"api/user\", data);\n  }\n  updateUser(id, data){\n    return this.http.put(\"api/user/\" + id, data, { responseType: 'text' });\n  }\n  deleteUser(id) {\n    return this.http.delete(\"api/user/\" + id, { responseType: 'text' });\n  }\n  changePassword(id, data){\n    return this.http.put<any>(\"api/user/pass/\" + id, data);\n  }\n  //============== MY COMPANY ===============\n\n  getMyCompanies(): Observable<any[]> {\n    return this.http.get<any[]>(\"api/mycompanies\");\n  }\n  getMyCompanyById(id): Observable<any> {\n    return this.http.get<any[]>(\"api/mycompany/\" + id);\n  }\n  addMyCompany(data): Observable<any> {\n    return this.http.post<any>(\"api/mycompany\", data);\n  }\n  updateMyCompany(id, data){\n    return this.http.put(\"api/mycompany/\" + id, data, { responseType: 'text' });\n  }\n  deleteMyCompany(id) {\n    return this.http.delete(\"api/mycompany/\" + id, { responseType: 'text' });\n  }\n  \n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { SettingsService } from '../../settings.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { User } from 'src/app/_class/user';\nimport { AppValidators } from 'src/app/_validators/AppValidators';\n\n@Component({\n  selector: 'app-form-password',\n  templateUrl: './form-password.component.html',\n  styleUrls: ['./form-password.component.scss']\n})\nexport class FormPasswordComponent implements OnInit {\n\n  formPassword: FormGroup;\n  \n  constructor(\n    public dialogRef: MatDialogRef<FormPasswordComponent>, \n    @Inject(MAT_DIALOG_DATA) public user: User,\n    private settingService: SettingsService, \n    private info: InfoPopupComponent,\n    private fb: FormBuilder\n    ) { }\n\n  ngOnInit() {\n    this.formPassword = this.fb.group({\n      password: ['', { validators: Validators.required}],\n      confirmPassword: ['', { validators: Validators.required}]\n    },{validator: AppValidators.nomatch('password','confirmPassword')})\n  }\n\n  onNoClick(){\n    this.dialogRef.close();\n  }\n\n  onChangePass(){\n    this.settingService.changePassword(this.user.id,this.formPassword.value).subscribe({\n      next: (res) => {\n        this.info.showSuccessUpdate(\"hasło użytkownika\");\n        this.dialogRef.close();\n      },\n      error:(err) =>{ this.info.showErrorUpdate(\"hasło użytkownika\");},\n      complete: () =>{}\n    })\n  }\n\n}\n","<div>\n    <h5>Zmiana hasła dla użytkownika {{ user.name }}</h5>\n</div>\n<hr>\n<form [formGroup]=\"formPassword\">\n    <div class=\"form-group row\">\n        <label for=\"password\" class=\"col-sm-3 col-form-label\">Hasło</label>\n        <div class=\"col-sm-9\">\n            <input type=\"password\" pPassword [formControl]=\"formPassword.get('password')\" id=\"password\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Hasło\" required\n                autocomplete=\"off\" />\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formPassword.get('password').hasError('required') && formPassword.get('password').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"confirmPassword\" class=\"col-sm-3 col-form-label\">Powtórz hasło</label>\n        <div class=\"col-sm-9\">\n            <input type=\"password\" pPassword [formControl]=\"formPassword.get('confirmPassword')\" id=\"confirmPassword\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Hasło\" required\n                autocomplete=\"off\" />\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formPassword.get('confirmPassword').hasError('required') && formPassword.get('confirmPassword').touched\">\n                musi być wypełnione\n            </p>\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formPassword.get('confirmPassword').hasError('nomatch') && formPassword.get('confirmPassword').touched\">\n                hasła muszą być identyczne\n            </p>\n        </div>\n    </div>\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie\" matTooltipClass=\"tooltip-red\" type=\"button\" pButton\n        icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button [disabled]=\"formPassword.invalid\" matTooltip=\"Zmień hasło\" matTooltipClass=\"tooltip-green\"\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onChangePass()\"\n        label=\"Zapisz\"></button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { SettingsService } from '../../settings.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { ThemePalette } from '@angular/material/core';\n\n@Component({\n  selector: 'app-form-users',\n  templateUrl: './form-users.component.html',\n  styleUrls: ['./form-users.component.scss']\n})\nexport class FormUsersComponent implements OnInit {\n  color: ThemePalette = 'primary';\n  formUser: FormGroup;\n\n  constructor(public dialogRef: MatDialogRef<FormUsersComponent>, private settingService: SettingsService, private info: InfoPopupComponent) { }\n\n  ngOnInit() {\n    this.formUser = new FormGroup({\n      name: new FormControl('', { validators: Validators.required}),\n      username: new FormControl('', { validators: Validators.required}),\n      password: new FormControl('', { validators: Validators.required}),\n      active: new FormControl(false),\n      role: new FormControl('', { validators: Validators.required}),\n    })\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  onAddUser() {\n    this.settingService.addUser(this.formUser.value).subscribe({\n      next: (res) => {\n        this.info.showSuccessAdd(\"użytkownika\");\n        this.dialogRef.close();\n      },\n      error: (err) => { \n        this.info.showErrorAdd(\"użytkownika\") \n      },\n      complete: () => { }\n    })\n  }\n\n}\n","<form [formGroup]=\"formUser\">\n\n    <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Imię Nazwisko</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUser.get('name')\" autofocus type=\"text\" id=\"name\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Imię Nazwisko\"\n                required autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('name').hasError('required') && formUser.get('name').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"username\" class=\"col-sm-3 col-form-label\">Login</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUser.get('username')\" type=\"text\" id=\"username\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Login\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('username').hasError('required') && formUser.get('username').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"password\" class=\"col-sm-3 col-form-label\">Hasło</label>\n        <div class=\"col-sm-9\">\n            <input type=\"password\" pPassword [formControl]=\"formUser.get('password')\" id=\"password\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Hasło\" required\n                autocomplete=\"off\" />\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('password').hasError('required') && formUser.get('password').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"active\" class=\"col-sm-3 col-form-label\">Aktywny</label>\n        <div class=\"col-sm-9\">\n            <mat-slide-toggle [formControl]=\"formUser.get('active')\"\n                [color]=\"color\"\n                [checked]=\"true\">\n                Aktywny\n            </mat-slide-toggle>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"roles\" class=\"col-sm-3 col-form-label\">Role</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUser.get('role')\" type=\"text\" id=\"roles\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Role\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('role').hasError('required') && formUser.get('role').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie dodawania\" matTooltipClass=\"tooltip-red\"\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button [disabled]=\"formUser.invalid\" matTooltip=\"Dodaj użytkownika\" matTooltipClass=\"tooltip-green\"\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onAddUser()\"\n        label=\"Zapisz\"></button>\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from '../../settings.service';\nimport { User } from 'src/app/_class/user';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { ThemePalette } from '@angular/material/core';\n\n@Component({\n  selector: 'app-form-userupdate',\n  templateUrl: './form-userupdate.component.html',\n  styleUrls: ['./form-userupdate.component.scss']\n})\nexport class FormUserupdateComponent implements OnInit {\n  color: ThemePalette = 'primary';\n  formUserUpdate: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<FormUserupdateComponent>, \n    private settingService: SettingsService, \n    @Inject(MAT_DIALOG_DATA) public user: User,\n    private info: InfoPopupComponent\n    ) { }\n\n  ngOnInit() {\n    this.formUserUpdate = new FormGroup({\n      name: new FormControl('', { validators: Validators.required}),\n      username: new FormControl('', { validators: Validators.required}),\n      active: new FormControl(false),\n      role: new FormControl('', { validators: Validators.required}),\n    });\n    this.formUserUpdate.patchValue(this.user);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  onUpdateUser() {\n    this.settingService.updateUser(this.user.id,this.formUserUpdate.value).subscribe({\n      next: (res) => {\n        this.info.showSuccessUpdate(\"użytkownika\");\n        this.dialogRef.close();\n      },\n      error: (err) => { \n        console.log(err);\n        this.info.showErrorUpdate(\"użytkownika\") \n      },\n      complete: () => {\n       }\n    })\n  }\n}","<form [formGroup]=\"formUserUpdate\">\n\n    <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Imię Nazwisko</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUserUpdate.get('name')\" type=\"text\" id=\"name\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Imię Nazwisko\"\n                required autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUserUpdate.get('name').hasError('required') && formUserUpdate.get('name').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"username\" class=\"col-sm-3 col-form-label\">Login</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUserUpdate.get('username')\" type=\"text\" id=\"username\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Login\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUserUpdate.get('username').hasError('required') && formUserUpdate.get('username').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"active\" class=\"col-sm-3 col-form-label\">Aktywny</label>\n        <div class=\"col-sm-9\">\n            <mat-slide-toggle [formControl]=\"formUserUpdate.get('active')\"\n                [color]=\"color\"\n                [checked]=\"true\">\n                Aktywny\n            </mat-slide-toggle>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"roles\" class=\"col-sm-3 col-form-label\">Role</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUserUpdate.get('role')\" type=\"text\" id=\"roles\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Role\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUserUpdate.get('role').hasError('required') && formUserUpdate.get('role').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie\" matTooltipClass=\"tooltip-red\"\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button [disabled]=\"formUserUpdate.invalid\" matTooltip=\"Aktualizuj użytkownika\" matTooltipClass=\"tooltip-green\"\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onUpdateUser()\"\n        label=\"Zapisz\"></button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { SettingsService } from '../settings.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { FormUsersComponent } from './form-users/form-users.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport {Location, LocationStrategy, PathLocationStrategy} from '@angular/common';\nimport { FormPasswordComponent } from './form-password/form-password.component';\nimport { User } from 'src/app/_class/user';\nimport { ConfirmationService } from 'primeng/api';\nimport { FormUserupdateComponent } from './form-userupdate/form-userupdate.component';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n\n  users: any;\n\n  constructor(\n    private location: Location, \n    public dialog: MatDialog,\n    private settingService: SettingsService,\n    private infoPopup: InfoPopupComponent,\n    private confirmationService: ConfirmationService\n    ) { }\n\n  ngOnInit() {\n    this.loadData();\n  }\n\n  loadData(){\n    this.settingService.getUsers().subscribe({\n      next: (res) =>{\n          this.users = res;\n      },\n      error: (err) => {\n        this.infoPopup.showErrorDownload(\"użytkowników\")\n      },\n      complete: ()=> {\n\n      }\n      \n    })\n  }\n\n  openDialogAdd(): void {\n    const dialogRef = this.dialog.open(FormUsersComponent, {\n      width: '450px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog was closed');\n    });\n  }\n  openDialogUpdate(usr): void {\n    const dialogRef = this.dialog.open(FormUserupdateComponent, {\n      data: usr,\n      width: '450px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog was closed');\n    });\n  }\n\n  openDialogChangePass(usr): void {\n    const dialogRef = this.dialog.open(FormPasswordComponent, {\n      data: usr,\n      width: '450px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog pass was closed');\n    });\n  }\n\n  onDeleteUser(user: User){\n    this.confirmationService.confirm({\n      message: 'Na pewno chcesz usunąć '+ user.name + '?',\n      acceptLabel:'Tak',\n      rejectLabel:'Nie',\n      accept: () => {\n        //Actual logic to perform a confirmation\n        this.settingService.deleteUser(user.id).subscribe(\n          {\n            next: (res) => {\n              this.infoPopup.showSuccessDelete(\"użytkownia\");\n            },\n            error: (err) => {\n              this.infoPopup.showErrorDelete(\"użytkownika\");\n            },\n            complete: () => {\n              this.loadData();\n            }\n          }\n        )\n      }\n    });\n  }\n\n  backClicked() {\n    this.location.back();\n  }\n}\n","<div class=\"container\">\n    <div class=\"row mb-2 ml-0\">\n        <button (click)=\"backClicked()\" mat-raised-button><i class=\"pi pi-chevron-left\"></i></button>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-2\">\n            <div class=\"bg-white shadow-sm w-100 h-100 p-2 rounded\" style=\"text-align: center;\">\n                <button class=\"w-100\" mat-raised-button color=\"primary\" (click)=\"openDialogAdd()\">Dodaj\n                    użytkownika</button>\n            </div>\n        </div>\n        <div class=\"col-10\">\n            <div class=\"row\">\n                <p-table #us [value]=\"users\" dataKey=\"id\" [filterDelay]=\"0\" [globalFilterFields]=\"['username']\" [resizableColumns]=\"true\" columnResizeMode=\"expand\">\n                    <ng-template pTemplate=\"caption\">\n                        Użytkownicy\n                        <div class=\"ui-table-globalfilter-container\">\n                            <input pInputText type=\"text\" (input)=\"us.filterGlobal($event.target.value, 'contains')\"\n                                placeholder=\"Wyszukiwarka\" />\n                        </div>\n                    </ng-template>\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <th style=\"width: 40px;\">ID</th>\n                            <th pResizableColumn>Login</th>\n                            <th pResizableColumn>Imie Nazwisko</th>\n                            <th pResizableColumn>Aktywny</th>\n                            <th pResizableColumn>Role</th>\n                            <th style=\"width:8em\"></th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-rowData>\n                        <tr>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.id}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.username}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.name}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.active}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.role}}\n                            </td>\n                            <td style=\"text-align:center\">\n                                <button matTooltip=\"Edycja Użytkownika\" matTooltipClass=\"tooltip-red\" pButton\n                                    type=\"button\" icon=\"pi pi-pencil\" class=\"ui-button-info edit-button\"\n                                    (click)=\"openDialogUpdate(rowData)\"></button>\n                                <button matTooltip=\"Zmiana hasła\" matTooltipClass=\"tooltip-red\" pButton\n                                    type=\"button\" icon=\"pi pi-key\" class=\"ml-1 ui-button-info edit-button\"\n                                    (click)=\"openDialogChangePass(rowData)\"></button>\n                                <button matTooltip=\"Usuwanie\" matTooltipClass=\"tooltip-red\" pButton type=\"button\"\n                                    icon=\"pi pi-times\" class=\"ml-1 ui-button-info remove-button\"\n                                    (click)=\"onDeleteUser(rowData)\"></button>\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\">\n                        <tr>\n                            <td colspan=\"6\" style=\"text-align:left\">Brak danych.</td>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </div>\n</div>"]}