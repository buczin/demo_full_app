{"version":3,"sources":["webpack:///src/app/films/film-service/films.service.ts"],"names":["OkleinaEnum","FilmsService","http","producers","producersSelect","console","log","getProducers","subscribe","next","res","forEach","element","el","label","producerName","value","push","error","err","complete","get","id","data","post","put","responseType","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,UAAYA,WAAZ;;AAAA,iBAAYA,WAAZ,EAAuB;AACrB;AACA;AACA;AACD,OAJD,EAAYA,WAAW,KAAXA,WAAW,MAAvB;;UAyBaC,Y;AAMX,8BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AAHb,eAAAC,SAAA,GAAyB,EAAzB;AACA,eAAAC,eAAA,GAAgC,EAAhC;AAEkC;;;;gDAEtB;AAAA;;AACjBC,mBAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,iBAAKF,eAAL,GAAuB,EAAvB;AACA,iBAAKG,YAAL,GAAoBC,SAApB,CAA8B;AAC5BC,kBAAI,EAAE,cAACC,GAAD,EAAS;AACbA,mBAAG,CAACC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrB,uBAAI,CAACT,SAAL,GAAiBO,GAAjB;AACA,sBAAIG,EAAE,GAAe;AAACC,yBAAK,EAACF,OAAO,CAACG,YAAf;AAA4BC,yBAAK,EAACJ;AAAlC,mBAArB;;AACA,uBAAI,CAACR,eAAL,CAAqBa,IAArB,CAA0BJ,EAA1B;AACD,iBAJD;AAKD,eAP2B;AAQ5BK,mBAAK,EAAE,eAACC,GAAD,EAAS,CACf,CAT2B;AAU5BC,sBAAQ,EAAE,oBAAM,CACf;AAX2B,aAA9B;AAaD;;;uCAES;AACR,mBAAO,KAAKlB,IAAL,CAAUmB,GAAV,CAAyB,WAAzB,CAAP;AACD;;;oCACSC,E,EAAE;AACV,mBAAO,KAAKpB,IAAL,CAAUmB,GAAV,CAAuB,cAAcC,EAArC,CAAP;AACD;;;4CACc;AACb,mBAAO,KAAKpB,IAAL,CAAUmB,GAAV,CAAsB,gBAAtB,CAAP;AACD;;;oCACSE,I,EAAI;AACZ,mBAAO,KAAKrB,IAAL,CAAUsB,IAAV,CAAwB,UAAxB,EAAoCD,IAApC,CAAP;AACD;;;wCACaD,E,EAAIC,I,EAAI;AACpB,mBAAO,KAAKrB,IAAL,CAAUuB,GAAV,CAAuB,cAAcH,EAArC,EAAyCC,IAAzC,CAAP;AACD;;;uCACYD,E,EAAI;AACf,mBAAO,KAAKpB,IAAL,WAAiB,cAAcoB,EAA/B,EAAmC;AAAEI,0BAAY,EAAE;AAAhB,aAAnC,CAAP;AACD,W,CAED;;;;yCAEY;AACV,mBAAO,KAAKxB,IAAL,CAAUmB,GAAV,CAA2B,oBAA3B,CAAP;AACD;;;sCACWC,E,EAAE;AACZ,mBAAO,KAAKpB,IAAL,CAAUmB,GAAV,CAAyB,uBAAuBC,EAAhD,CAAP;AACD;;;6CACe;AACd,mBAAO,KAAKpB,IAAL,CAAUmB,GAAV,CAAsB,yBAAtB,CAAP;AACD;;;sCACWE,I,EAAI;AACd,mBAAO,KAAKrB,IAAL,CAAUsB,IAAV,CAA0B,mBAA1B,EAA+CD,IAA/C,CAAP;AACD;;;yCACcD,E,EAAIC,I,EAAI;AACrB,mBAAO,KAAKrB,IAAL,CAAUuB,GAAV,CAAyB,uBAAuBH,EAAhD,EAAoDC,IAApD,CAAP;AACD;;;yCACcD,E,EAAI;AACjB,mBAAO,KAAKpB,IAAL,WAAiB,uBAAuBoB,EAAxC,EAA4C;AAAEI,0BAAY,EAAE;AAAhB,aAA5C,CAAP;AACD;;;;;;;yBAhEUzB,Y,EAAY,uH;AAAA,O;;;eAAZA,Y;AAAY,iBAAZA,YAAY,K;AAAA,oBAFX;;;;;wEAEDA,Y,EAAY;gBAHxB,wDAGwB;iBAHb;AACV0B,sBAAU,EAAE;AADF,W;AAGa,U","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { SelectItem } from 'primeng/api';\n\n\nexport enum OkleinaEnum {\n  DOSTEPNA = \"DOSTEPNA\",\n  NIEDOSTEPNA = \"NIEDOSTEPNA\",\n  DOSTEPNOSCOGRANICZONA = \"DOSTEPNOSCOGRANICZONA\",\n}\n\nexport interface Okleina {\n  id?: number;\n  number?: string;\n  name?: string;\n  producer?: string;\n  ecoPlastNumber?: string;\n  ralNumber?: string;\n  imgLink?: string;\n  status?: OkleinaEnum;\n}\n\nexport interface Producent {\n  id?: number;\n  producerName?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilmsService {\n\n  public allFilms: Okleina[];\n  public producers: Producent[] = [];\n  public producersSelect: SelectItem[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  loadProducersSelect(){\n    console.log(\"Load producers in service\");\n    this.producersSelect = [];\n    this.getProducers().subscribe({\n      next: (res) => {\n        res.forEach(element => {\n          this.producers = res;\n          let el: SelectItem = {label:element.producerName,value:element}\n          this.producersSelect.push(el);\n        });\n      },\n      error: (err) => {\n      },\n      complete: () => {\n      }\n    })\n  }\n\n  getOklieny(): Observable<Okleina[]> {\n    return this.http.get<Okleina[]>(\"api/films\");\n  }\n  getOklina(id): Observable<Okleina> {\n    return this.http.get<Okleina>(\"api/film/\" + id);\n  }\n  getCountOkleina(): Observable<number> {\n    return this.http.get<number>(\"api/film/count\");\n  }\n  addOklina(data): Observable<Okleina> {\n    return this.http.post<Okleina>(\"api/film\", data);\n  }\n  updateOkleina(id, data): Observable<Okleina> {\n    return this.http.put<Okleina>(\"api/film/\" + id, data);\n  }\n  deleteOklina(id) {\n    return this.http.delete(\"api/film/\" + id, { responseType: 'text' });\n  }\n\n  // PRODUCERS\n\n  getProducers(): Observable<Producent[]> {\n    return this.http.get<Producent[]>(\"api/film/producers\");\n  }\n  getProducer(id): Observable<Producent> {\n    return this.http.get<Producent>(\"api/film/producer/\" + id);\n  }\n  getCountProducer(): Observable<number> {\n    return this.http.get<number>(\"api/film/producer/count\");\n  }\n  addProducer(data): Observable<Producent> {\n    return this.http.post<Producent>(\"api/film/producer\", data);\n  }\n  updateProducer(id, data): Observable<Producent> {\n    return this.http.put<Producent>(\"api/film/producer/\" + id, data);\n  }\n  deleteProducer(id) {\n    return this.http.delete(\"api/film/producer/\" + id, { responseType: 'text' });\n  }\n\n}\n"]}