{"version":3,"sources":["webpack:///src/app/contractor/client-add-form/client-add-form.component.ts","webpack:///src/app/contractor/client-add-form/client-add-form.component.html","webpack:///src/app/contractor/client-main/client-main.component.ts","webpack:///src/app/contractor/client-main/client-main.component.html","webpack:///src/app/contractor/client-service/client.service.ts","webpack:///src/app/contractor/contractor-routing.module.ts","webpack:///src/app/contractor/contractor.module.ts"],"names":["ClientAddFormComponent","clientData","dialogRef","clientService","infoPopup","formClient","id","symfoniaId","shortName","name","validators","required","nip","validatenip","pesel","regon","validateregon9","updateOn","town","street","houseNumber","flatNumber","postalCode","province","country","phonenumber","phonenumber2","email","www","patchValue","close","addClient","value","subscribe","next","res","showSuccessAdd","exit","error","err","showErrorAdd","complete","updateClient","showSuccessUpdate","showErrorUpdate","selector","templateUrl","styleUrls","ClientMainComponent","dialog","auth","messageService","confirmationService","client","onErr","clonedclients","loading","loadData","getClients","showErrorDownload","push","getCountClient","clientCount","showErrorCount","open","width","panelClass","afterClosed","result","console","log","selected","data","add","severity","summary","detail","what","clear","confirm","message","acceptLabel","rejectLabel","acceptIcon","acceptButtonStyleClass","rejectButtonStyleClass","accept","deleteClient","showSuccessDelete","showErrorDelete","showDialogToAddClient","ClientService","http","get","post","put","responseType","providedIn","routes","path","component","ContractorRoutingModule","forChild","imports","exports","ContractorModule","declarations","providers","entryComponents"],"mappings":"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","file":"contractor-contractor-module-es5.js","sourcesContent":["import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { ClientService } from '../client-service/client.service';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AppValidators } from 'src/app/_validators/AppValidators';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-client-add-form',\n  templateUrl: './client-add-form.component.html',\n  styleUrls: ['./client-add-form.component.scss']\n})\nexport class ClientAddFormComponent implements OnInit {\n\n  formClient: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public clientData: any,\n    public dialogRef: MatDialogRef<ClientAddFormComponent>,\n    private clientService: ClientService,\n    private infoPopup: InfoPopupComponent) { }\n\n  ngOnInit() {\n    this.formClient = new FormGroup({\n      id: new FormControl(''),\n      symfoniaId: new FormControl(''),\n      shortName: new FormControl(''),\n      name: new FormControl('', { validators: [Validators.required] }),\n      nip: new FormControl('', { validators: [AppValidators.validatenip] }),\n      pesel: new FormControl(''),\n      regon: new FormControl('', { validators: [AppValidators.validateregon9], updateOn: 'blur' }),\n\n      town: new FormControl(''),\n      street: new FormControl(''),\n      houseNumber: new FormControl(''),\n      flatNumber: new FormControl(''),\n      postalCode: new FormControl(''),\n      province: new FormControl(''),\n      country: new FormControl(''),\n\n      phonenumber: new FormControl(''),\n      phonenumber2: new FormControl(''),\n      email: new FormControl('', { validators: [Validators.email] }),\n      www: new FormControl('')\n    });\n\n    if(this.clientData){\n      this.formClient.patchValue(this.clientData);\n    }\n  }\n\n  exit(): void {\n    this.dialogRef.close();\n  }\n\n  addNewClient() {\n    this.clientService.addClient(this.formClient.value).subscribe(\n      {\n        next: (res) => {\n          this.infoPopup.showSuccessAdd(\"klienta\");\n          this.exit();\n        },\n        error: (err) => {\n          this.infoPopup.showErrorAdd(\"klienta\");\n        },\n        complete: () => {\n        }\n      }\n    )\n  }\n\n  updateClient(){\n    \n    this.clientService.updateClient(this.formClient.value.id,this.formClient.value).subscribe(\n      {\n        next: (res) => {\n          this.infoPopup.showSuccessUpdate(\"klienta\");\n          this.exit();\n        },\n        error: (err) => {\n          this.infoPopup.showErrorUpdate(\"klienta\");\n        },\n        complete: () => {\n        }\n      }\n    )\n  }\n\n}\n","<div class=\"sb-dialog-titlebar\">\n    <span *ngIf=\"!clientData\" class=\"\">Nowy Klient</span>\n    <span *ngIf=\"clientData\" class=\"\">Aktualizacja Klient</span>\n</div>\n<div class=\"sb-dialog-content\">\n\n    <form class=\"m-4\" [formGroup]=\"formClient\">\n\n        <div class=\"form-group m-0 p-0\">\n            <div>\n                <p class=\"p-0 m-0\"><b>DANE</b></p>\n            </div>\n            <div class=\"p-fluid p-formgrid p-grid\">\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"shortName\">Skrócona nazwa</label>\n                    <input pInputText type=\"text\" id=\"shortName\" [formControl]=\"formClient.get('shortName')\" required\n                        autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"name\">Nazwa*</label>\n                <textarea [style]=\"{'width':'100%'}\" pInputTextarea type=\"text\" id=\"name\" [formControl]=\"formClient.get('name')\" required>\n                    </textarea>\n                    <p class=\"invalid-feedback\"\n                        *ngIf=\"formClient.get('name').hasError('required') && formClient.get('name').touched\">\n                        musi być wypełnione\n                    </p>\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"symfoniaId\">Symfonia ID</label>\n                    <input pInputText type=\"text\" id=\"symfoniaId\" [formControl]=\"formClient.get('symfoniaId')\" required\n                        autocomplete=\"off\">\n                </div>\n\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"nip\">NIP</label>\n                    <input disabled pInputText type=\"text\" id=\"nip\" [formControl]=\"formClient.get('nip')\" autocomplete=\"off\">\n                    <p class=\"invalid-feedback\"\n                        *ngIf=\"formClient.get('nip').hasError('nipFormat') && formClient.get('nip').touched\">\n                        niepoprawny nip\n                    </p>\n                </div>\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"regon\">REGON</label>\n                    <input pInputText type=\"text\" id=\"regon\" [formControl]=\"formClient.get('regon')\" autocomplete=\"off\">\n                    <p class=\"invalid-feedback\"\n                        *ngIf=\"formClient.get('regon').hasError('regonFormat') && formClient.get('regon').touched\">\n                        niepoprawny regon\n                    </p>\n                </div>\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"pesel\">PESEL</label>\n                    <input disabled pInputText type=\"text\" id=\"pesel\" [formControl]=\"formClient.get('pesel')\" autocomplete=\"off\">\n                </div>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <div>\n                <p class=\"mb-0 mt-4\"><b>ADRES</b></p>\n            </div>\n            <div class=\"p-fluid p-formgrid p-grid\">\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"town\">Miasto</label>\n                    <input pInputText type=\"text\" id=\"town\" [formControl]=\"formClient.get('town')\" autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"street\">Ulica</label>\n                    <input pInputText type=\"text\" id=\"street\" [formControl]=\"formClient.get('street')\"\n                        autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-2 mb-0 pb-0\" style=\"padding: 0.5rem;\">\n                    <label class=\"mb-0\" for=\"houseNumber\">Numer budynku</label>\n                    <input pInputText type=\"text\" id=\"houseNumber\" [formControl]=\"formClient.get('houseNumber')\"\n                        autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-2 mb-0 pb-0\" style=\"padding: 0.5rem;\">\n                    <label class=\"mb-0\" for=\"flatNumber\">Numer mieszkania</label>\n                    <input pInputText type=\"text\" id=\"flatNumber\" [formControl]=\"formClient.get('flatNumber')\"\n                        autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"postalCode\">Kod Pocztowy</label>\n                    <input pInputText type=\"text\" id=\"postalCode\" [formControl]=\"formClient.get('postalCode')\"\n                        autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"province\">Województwo</label>\n                    <input pInputText type=\"text\" id=\"province\" [formControl]=\"formClient.get('province')\"\n                        autocomplete=\"off\">\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"country\">Kraj</label>\n                    <input pInputText type=\"text\" id=\"country\" [formControl]=\"formClient.get('country')\"\n                        autocomplete=\"off\">\n                </div>\n\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <div>\n                <p class=\"mb-0 mt-4\"><b>DANE KONTAKTOWE</b></p>\n            </div>\n\n            <div class=\"p-fluid p-formgrid p-grid\">\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"email\">EMAIL</label>\n                    <input pInputText type=\"text\" id=\"email\" [formControl]=\"formClient.get('email')\" autocomplete=\"off\">\n                    <p class=\"invalid-feedback\"\n                        *ngIf=\"formClient.get('email').hasError('email') && formClient.get('email').touched\">\n                        niepoprawny email\n                    </p>\n                </div>\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"phonenumber\">Numer telefonu</label>\n                    <input pInputText type=\"text\" id=\"phonenumber\" [formControl]=\"formClient.get('phonenumber')\"\n                        autocomplete=\"off\">\n                    <p class=\"invalid-feedback\"\n                        *ngIf=\"formClient.get('phonenumber').hasError('minLength') && formClient.get('phonenumber').touched\">\n                        niepoprawny numer telefonu\n                    </p>\n                </div>\n\n                <div class=\"p-field p-col-4 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"phonenumber2\">Numer telefonu 2</label>\n                    <input pInputText type=\"text\" id=\"phonenumber2\" [formControl]=\"formClient.get('phonenumber2')\"\n                        autocomplete=\"off\">\n                    <p class=\"invalid-feedback\"\n                        *ngIf=\"formClient.get('phonenumber2').hasError('minLength') && formClient.get('phonenumber2').touched\">\n                        niepoprawny numer telefonu\n                    </p>\n                </div>\n            </div>\n            <div class=\"p-fluid p-formgrid p-grid\">\n                <div class=\"p-field p-col-12 mb-0 pb-0\">\n                    <label class=\"mb-0\" for=\"www\">WWW</label>\n                    <input pInputText type=\"text\" id=\"www\" [formControl]=\"formClient.get('www')\" autocomplete=\"off\">\n                </div>\n\n            </div>\n        </div>\n\n    </form>\n</div>\n\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn sb-dialog-footer\">\n\n    <button pButton pRipple type=\"button\" (click)=\"exit()\" matTooltip=\"Anulowanie dodawania\" label=\"Anuluj\"\n        matTooltipClass=\"tooltip-red\" icon=\"pi pi-times\"\n        class=\"p-button-raised p-button-outlined p-button-secondary p-button-sm\"></button>\n\n    <button *ngIf=\"!clientData\" [disabled]=\"formClient.invalid\" pButton pRipple type=\"button\" (click)=\"addNewClient()\"\n        matTooltip=\"Dodaj klienta\" label=\"Zapisz\" matTooltipClass=\"tooltip-green\" icon=\"pi pi-check\"\n        class=\"p-button-raised p-button-success p-button-sm\"></button>\n\n    <button *ngIf=\"clientData\" [disabled]=\"formClient.invalid\" pButton pRipple type=\"button\" (click)=\"updateClient()\"\n        matTooltip=\"Aktualizuj klienta\" label=\"Aktualizuj\" matTooltipClass=\"tooltip-green\" icon=\"pi pi-check\"\n        class=\"p-button-raised p-button-success p-button-sm\"></button>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Client, ClientService } from '../client-service/client.service';\nimport { MessageService, SelectItem, ConfirmationService } from 'primeng/api';\nimport { InfoPopupComponent } from 'src/app/info-popup/info-popup.component';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { ClientAddFormComponent } from '../client-add-form/client-add-form.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-client-main',\n  templateUrl: './client-main.component.html',\n  styleUrls: ['./client-main.component.scss']\n})\nexport class ClientMainComponent implements OnInit {\n  \n  client: Client[] = [];\n\n  onErr: Client =\n    {\n      id: 0,\n      name: \"---\",\n      nip: \"---\",\n      regon: \"---\",\n      email: \"---\",\n      phonenumber: \"---\"\n    };\n  clientCount:number;\n  err: boolean;\n  newclient: boolean;\n  available: SelectItem[];\n  clonedclients: { [s: string]: Client; } = {};\n  loading=false;\n  selectedClient:any;\n\n  constructor(\n    public dialog: MatDialog,\n    public auth:AuthService,\n    private clientService: ClientService, \n    private infoPopup: InfoPopupComponent, \n    private messageService: MessageService, \n    private confirmationService: ConfirmationService) { }\n\n  ngOnInit() {\n    this.err = false;\n    this.loadData();\n  }\n\n  loadData(){\n    this.loading=true;\n    this.clientService.getClients().subscribe(\n      {\n        next: (res) => {\n          this.client = res;\n          this.err = false;\n        },\n        error: (err) => {\n          this.showErrorDownload()\n          this.err = true;\n          this.client.push(this.onErr);\n        },\n        complete: () => {\n          this.loading=false;\n        }\n      }\n    )\n\n    this.clientService.getCountClient().subscribe({\n      next: (res) => {\n        this.clientCount = res\n      },\n      error: (err) => {\n        this.showErrorCount(\"klientów\")\n      },\n      complete: () => {\n      }\n    })\n\n\n  }\n\n  showDialogToAddClient() {\n    const dialogRef = this.dialog.open(ClientAddFormComponent, {\n      width: '1000px',\n      panelClass: 'no-padding-dialog'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog client add was closed');\n    });\n  }\n\n  showDialogToUpdateClient(selected) {\n    const dialogRef = this.dialog.open(ClientAddFormComponent, {\n      width: '1000px',\n      data: selected,\n      panelClass: 'no-padding-dialog'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.loadData();\n      console.log('The dialog update client was closed');\n    });\n  }\n\n\n  showSuccess() {\n    this.messageService.add({ severity: 'success', summary: 'Edycja Klienta', detail: 'Poprawnie Zaktualizowano Klienta' });\n  }\n  showError() {\n    this.messageService.add({ severity: 'error', summary: 'ERROR', detail: 'Nie udało się zaktualizować klienta' });\n  }\n\n  showErrorCount(what: String) {\n    this.messageService.add({ severity: 'error', summary: 'ERROR', detail: 'Nie udało się pobrać ilości ' + what });\n  }\n\n  showErrorDownload() {\n    this.messageService.add({ severity: 'error', summary: 'ERROR', detail: 'Nie udało się pobrać listy klientów. Proszę odświeżyć stronę' });\n  }\n\n  clear() {\n    this.messageService.clear();\n  }\n\n  onRowDeleteClient(client: Client) {\n    this.confirmationService.confirm({\n      message: 'Na pewno chcesz usunąć '+ client.name + '?',\n      acceptLabel:'Tak',\n      rejectLabel:'Nie',\n      acceptIcon: 'pi pi-trash',\n      acceptButtonStyleClass: 'p-button-raised p-button-sm p-button-danger',\n      rejectButtonStyleClass: 'p-button-raised p-button-outlined p-button-secondary p-button-sm',\n      accept: () => {\n        this.clientService.deleteClient(client.id).subscribe(\n          {\n            next: (res) => {\n              this.infoPopup.showSuccessDelete(\"klienta\");\n            },\n            error: (err) => {\n              this.infoPopup.showErrorDelete(\"klient\");\n            },\n            complete: () => {\n              this.loadData();\n            }\n          }\n        )\n      }\n    });\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col-lg-3 col-md-6 col-sm-6\">\n        <div class=\"card card-stats\">\n            <div class=\"card-body\">\n                <div class=\"row\">\n                    <div class=\"col-5 col-md-4\">\n                        <div class=\"text-center\">\n                            <span class=\"material-icons icon-big\">face</span>\n                        </div>\n                    </div>\n                    <div class=\"col-7 col-md-8\">\n                        <div class=\"numbers\">\n                            <p class=\"card-category\">Kontrahenci</p>\n                            <p class=\"card-title\">{{clientCount}}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-footer \">\n                <hr>\n                <div class=\"stats-bar\">\n                    <div class=\"stats\">\n                        <mat-icon class=\"fo-small-icon\">calculate</mat-icon><span class=\"fo-text\">Ilość</span>\n                    </div>\n                    <div class=\"stats-bar-button\">\n                        <button pButton type=\"button\" (click)=\"showDialogToAddClient()\"\n                            matTooltip=\"Dodanie nowej pozycji\" matTooltipClass=\"tooltip-green\" icon=\"pi pi-plus\"\n                            class=\"p-button-raised p-button-sm p-button-secondary\">\n                        </button>\n                        <!-- <button (click)=\"showDialogToAddClient()\" matTooltip=\"Dodanie nowego kontrahenta\"\n                            matTooltipClass=\"tooltip-red\"\n                            class=\"ui-button-info ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only\"\n                            icon=\"pi pi-pencil\" pbutton=\"\" piniteditablerow=\"\" type=\"button\"\n                            ng-reflect-icon=\"pi pi-pencil\"><span aria-hidden=\"true\"\n                                class=\"ui-button-icon-left ui-clickable pi pi-plus\"></span>\n                            <span aria-hidden=\"true\" class=\"ui-button-text ui-clickable\">ui-btn</span>\n                        </button> -->\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n\n        <p-table #ct styleClass=\"p-datatable-striped\" [value]=\"client\" [loading]=\"loading\" dataKey=\"id\" editMode=\"row\"\n            sortMode=\"multiple\" [paginator]=\"true\" [rows]=\"10\" [rowsPerPageOptions]=\"[10,20,50]\"\n            [showCurrentPageReport]=\"true\" currentPageReportTemplate=\"{first} do {last} z {totalRecords}\"\n            [filterDelay]=\"0\" [autoLayout]=\"true\" selectionMode=\"single\" [(selection)]=\"selectedClient\"\n            [globalFilterFields]=\"['name','nip','pesel','shortName','phonenumber']\" [rowHover]=\"true\"\n            columnResizeMode=\"expand\">\n            <ng-template pTemplate=\"caption\">\n\n                <div class=\"row\">\n                    <div class=\"col\"><span>Lista Kontrahentów</span></div>\n                    <div class=\"col\" style=\"text-align: end;\"><input pInputText class=\"p-inputtext\" type=\"text\"\n                            (input)=\"ct.filterGlobal($event.target.value, 'contains')\" placeholder=\"Wyszukiwarka\" />\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template pTemplate=\"header\">\n                <tr class=\"cl-header\">\n                    <th matTooltip=\"symfonia ID\">\n                        <div>symf. ID</div>\n                    </th>\n                    <th pSortableColumn=\"shortName\">\n                        <div>Skrót nazwa<p-sortIcon field=\"shortName\"></p-sortIcon>\n                        </div>\n                    </th>\n                    <th pSortableColumn=\"name\">\n                        <div>Nazwa <p-sortIcon field=\"name\"></p-sortIcon>\n                        </div>\n                    </th>\n                    <th pSortableColumn=\"town\">\n                        <div>Miasto <p-sortIcon field=\"town\"></p-sortIcon>\n                        </div>\n                    </th>\n                    <th>\n                        <div>Ulica</div>\n                    </th>\n                    <th>\n                        <div>Nr. budynku</div>\n                    </th>\n                    <th>\n                        <div>Nr. mieszkania</div>\n                    </th>\n                    <th>\n                        <div>Kod pocztowy</div>\n                    </th>\n                    <th>\n                        <div>Województwo</div>\n                    </th>\n                    <th>\n                        <div>Kraj</div>\n                    </th>\n                    <th>\n                        <div>nr. tel.</div>\n                    </th>\n                    <th>\n                        <div>nr. tel. 2</div>\n                    </th>\n                    <th>\n                        <div>email</div>\n                    </th>\n                    <th>\n                        <div>nip</div>\n                    </th>\n                    <th>\n                        <div>pesel</div>\n                    </th>\n                    <th>\n                        <div>regon</div>\n                    </th>\n                    <th>\n                        <div>www</div>\n                    </th>\n                    <th style=\"width:90px;min-width: 90px;\"></th>\n                </tr>\n            </ng-template>\n            <ng-template pTemplate=\"body\" let-rowData let-ri=\"rowIndex\">\n                <tr class=\"cl-body\" [pSelectableRow]=\"rowData\">\n                    <td>{{rowData.symfoniaId}}</td>\n                    <td>{{rowData.shortName}}</td>\n                    <td>{{rowData.name}}</td>\n                    <td>{{rowData.town}}</td>\n                    <td>{{rowData.street}}</td>\n                    <td>{{rowData.houseNumber}}</td>\n                    <td>{{rowData.flatNumber}}</td>\n                    <td>{{rowData.postalCode}}</td>\n                    <td>{{rowData.province}}</td>\n                    <td>{{rowData.country}}</td>\n                    <td style=\"min-width: 110px;\">{{rowData.phonenumber}}</td>\n                    <td style=\"min-width: 110px;\">{{rowData.phonenumber2}}</td>\n                    <td>{{rowData.email}}</td>\n                    <td style=\"min-width: 110px;\">{{rowData.nip}}</td>\n                    <td>{{rowData.pesel}}</td>\n                    <td>{{rowData.regon}}</td>\n                    <td>{{rowData.www}}</td>\n\n                    <td style=\"text-align:center;width: 90px;min-width: 90px;\">\n\n                        <button appPermission permission=\"clientWrite\" pButton type=\"button\"\n                            (click)=\"showDialogToUpdateClient(rowData)\" matTooltip=\"Edycja Kontrahenta\"\n                            matTooltipClass=\"tooltip-green\" icon=\"pi pi-pencil\"\n                            class=\"p-button-raised p-button-sm\"></button>\n\n                        <button appPermission permission=\"clientDelete\" pButton type=\"button\"\n                            (click)=\"onRowDeleteClient(rowData)\" matTooltip=\"Usuwanie\" matTooltipClass=\"tooltip-red\"\n                            icon=\"pi pi-trash\" class=\"p-button-raised p-button-sm ml-1 p-button-danger\"></button>\n\n                        <!-- <button pButton pSaveEditableRow type=\"button\" (click)=\"onRowEditSave(rowData)\"\n                            matTooltip=\"Zapisz Kontrahenta\" matTooltipClass=\"tooltip-green\" *ngIf=\"editing\"\n                            icon=\"pi pi-check\" class=\"p-button-raised p-button-sm p-button-success\"></button>\n\n                        <button pButton pCancelEditableRow type=\"button\" (click)=\"onRowEditCancel(rowData, ri)\"\n                            matTooltip=\"Anuluj\" matTooltipClass=\"tooltip-red\" *ngIf=\"editing\" icon=\"pi pi-times\"\n                            class=\"p-button-raised p-button-sm ml-1 p-button-warning\"></button> -->\n                    </td>\n                </tr>\n            </ng-template>\n            <ng-template pTemplate=\"emptymessage\">\n                <tr>\n                    <td colspan=\"18\" style=\"text-align:left\">Brak danych.</td>\n                </tr>\n            </ng-template>\n        </p-table>\n\n    </div>\n\n</div>","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface Client {\n  id?: number;\n  symfoniaId?: number;\n  shortName?: string;\n  name?: string;\n  town?: string;\n  street?: string;\n  houseNumber?: string;\n  flatNumber?: string;\n  postalCode?: string;\n  province?: string;\n  country?: string;\n  phonenumber?: string;\n  phonenumber2?: string;\n  email?: string;\n  nip?: string;\n  pesel?: string;\n  regon?: string;\n  www?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n\n  public allClients: Client[];\n\n  constructor(private http: HttpClient) { }\n\n  getClients(): Observable<Client[]> {\n    return this.http.get<Client[]>(\"api/clients\");\n  }\n  getClient(id): Observable<Client> {\n    return this.http.get<Client>(\"api/client/\" + id);\n  }\n  getCountClient(): Observable<number> {\n    return this.http.get<number>(\"api/client/count\");\n  }\n  addClient(data): Observable<Client> {\n    return this.http.post<Client>(\"api/client\", data);\n  }\n  updateClient(id, data): Observable<Client> {\n    return this.http.put<Client>(\"api/client/\" + id, data);\n  }\n\n  deleteClient(id) {\n    return this.http.delete(\"api/client/\" + id, { responseType: 'text' });\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ClientMainComponent } from './client-main/client-main.component';\r\n\r\n\r\nconst routes: Routes = [\r\n\r\n  { path: '', component:  ClientMainComponent},\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContractorRoutingModule { }\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClientMainComponent } from './client-main/client-main.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { TableModule } from 'primeng/table';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { ButtonModule } from 'primeng/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ToastModule } from 'primeng/toast';\nimport { MessageModule } from 'primeng/message';\nimport { MessagesModule } from 'primeng/messages';\nimport { DialogModule } from 'primeng/dialog';\nimport { FieldsetModule } from 'primeng/fieldset';\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\nimport { MessageService } from 'primeng/api';\nimport { ContractorRoutingModule } from './contractor-routing.module';\nimport { ClientAddFormComponent } from './client-add-form/client-add-form.component'\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { RippleModule } from 'primeng/ripple';\nimport { SharedModule } from '../_shared/shared/shared.module'\n\n\n@NgModule({\n  declarations: [ClientMainComponent, ClientAddFormComponent],\n  imports: [\n    CommonModule,\n    ContractorRoutingModule,\n    MatIconModule,\n    TableModule,\n    FormsModule,\n    DropdownModule,\n    ButtonModule,\n    MatTooltipModule,\n    ToastModule,\n    MessageModule,\n    MessagesModule,\n    DialogModule,\n    FieldsetModule,\n    CodeHighlighterModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    InputTextModule,\n    RippleModule,\n    SharedModule\n  ],\n  providers: [MessageService],\n  entryComponents:[ClientAddFormComponent]\n})\nexport class ContractorModule { }\n"]}