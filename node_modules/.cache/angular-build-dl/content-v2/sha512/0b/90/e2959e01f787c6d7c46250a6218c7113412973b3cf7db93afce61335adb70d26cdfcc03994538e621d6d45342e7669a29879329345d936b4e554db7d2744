(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["settings-settings-module"],{

/***/ "./node_modules/@angular/material/esm2015/dialog.js":
/*!**********************************************************!*\
  !*** ./node_modules/@angular/material/esm2015/dialog.js ***!
  \**********************************************************/
/*! exports provided: MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogModule", function() { return MatDialogModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_FACTORY", function() { return MAT_DIALOG_SCROLL_STRATEGY_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY", function() { return MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DATA", function() { return MAT_DIALOG_DATA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DEFAULT_OPTIONS", function() { return MAT_DIALOG_DEFAULT_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY", function() { return MAT_DIALOG_SCROLL_STRATEGY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER", function() { return MAT_DIALOG_SCROLL_STRATEGY_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialog", function() { return MatDialog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwMatDialogContentAlreadyAttachedError", function() { return throwMatDialogContentAlreadyAttachedError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogContainer", function() { return MatDialogContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogClose", function() { return MatDialogClose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogTitle", function() { return MatDialogTitle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogContent", function() { return MatDialogContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogActions", function() { return MatDialogActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogConfig", function() { return MatDialogConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatDialogRef", function() { return MatDialogRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matDialogAnimations", function() { return matDialogAnimations; });
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm2015/animations.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm2015/portal.js");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm2015/keycodes.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm2015/overlay.js");
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */












/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Configuration for opening a modal dialog with the MatDialog service.
 * @template D
 */
class MatDialogConfig {
    constructor() {
        /**
         * The ARIA role of the dialog element.
         */
        this.role = 'dialog';
        /**
         * Custom class for the overlay pane.
         */
        this.panelClass = '';
        /**
         * Whether the dialog has a backdrop.
         */
        this.hasBackdrop = true;
        /**
         * Custom class for the backdrop.
         */
        this.backdropClass = '';
        /**
         * Whether the user can use escape or clicking on the backdrop to close the modal.
         */
        this.disableClose = false;
        /**
         * Width of the dialog.
         */
        this.width = '';
        /**
         * Height of the dialog.
         */
        this.height = '';
        /**
         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.
         */
        this.maxWidth = '80vw';
        /**
         * Data being injected into the child component.
         */
        this.data = null;
        /**
         * ID of the element that describes the dialog.
         */
        this.ariaDescribedBy = null;
        /**
         * ID of the element that labels the dialog.
         */
        this.ariaLabelledBy = null;
        /**
         * Aria label to assign to the dialog element.
         */
        this.ariaLabel = null;
        /**
         * Whether the dialog should focus the first focusable element on open.
         */
        this.autoFocus = true;
        /**
         * Whether the dialog should restore focus to the
         * previously-focused element, after it's closed.
         */
        this.restoreFocus = true;
        /**
         * Whether the dialog should close when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */
        this.closeOnNavigation = true;
        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const animationBody = [
    // Note: The `enter` animation transitions to `transform: none`, because for some reason
    // specifying the transform explicitly, causes IE both to blur the dialog content and
    // decimate the animation performance. Leaving it as `none` solves both issues.
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('void, exit', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0, transform: 'scale(0.7)' })),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ transform: 'none' })),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('150ms cubic-bezier(0, 0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ transform: 'none', opacity: 1 }))),
    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => void, * => exit', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({ opacity: 0 }))),
];
/**
 * Animations used by MatDialog.
 * \@docs-private
 * @type {?}
 */
const matDialogAnimations = {
    /**
     * Animation that is applied on the dialog container by defalt.
     */
    dialogContainer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('dialogContainer', animationBody),
    /**
     * @deprecated \@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.
     */
    slideDialog: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('slideDialog', animationBody)
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Throws an exception for the case when a ComponentPortal is
 * attached to a DomPortalOutlet without an origin.
 * \@docs-private
 * @return {?}
 */
function throwMatDialogContentAlreadyAttachedError() {
    throw Error('Attempting to attach dialog content after content is already attached');
}
/**
 * Internal component that wraps user-provided dialog content.
 * Animation is based on https://material.io/guidelines/motion/choreography.html.
 * \@docs-private
 */
class MatDialogContainer extends _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["BasePortalOutlet"] {
    /**
     * @param {?} _elementRef
     * @param {?} _focusTrapFactory
     * @param {?} _changeDetectorRef
     * @param {?} _document
     * @param {?} _config
     */
    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {
        super();
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        this._changeDetectorRef = _changeDetectorRef;
        this._document = _document;
        this._config = _config;
        /**
         * Element that was focused before the dialog was opened. Save this to restore upon close.
         */
        this._elementFocusedBeforeDialogWasOpened = null;
        /**
         * State of the dialog animation.
         */
        this._state = 'enter';
        /**
         * Emits when an animation state changes.
         */
        this._animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this._ariaLabelledBy = _config.ariaLabelledBy || null;
    }
    /**
     * Attach a ComponentPortal as content to this dialog container.
     * @template T
     * @param {?} portal Portal to be attached as the dialog content.
     * @return {?}
     */
    attachComponentPortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throwMatDialogContentAlreadyAttachedError();
        }
        this._savePreviouslyFocusedElement();
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /**
     * Attach a TemplatePortal as content to this dialog container.
     * @template C
     * @param {?} portal Portal to be attached as the dialog content.
     * @return {?}
     */
    attachTemplatePortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throwMatDialogContentAlreadyAttachedError();
        }
        this._savePreviouslyFocusedElement();
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    /**
     * Moves the focus inside the focus trap.
     * @private
     * @return {?}
     */
    _trapFocus() {
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        if (!this._focusTrap) {
            this._focusTrap = this._focusTrapFactory.create(element);
        }
        // If we were to attempt to focus immediately, then the content of the dialog would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        if (this._config.autoFocus) {
            this._focusTrap.focusInitialElementWhenReady();
        }
        else {
            /** @type {?} */
            const activeElement = this._document.activeElement;
            // Otherwise ensure that focus is on the dialog container. It's possible that a different
            // component tried to move focus while the open animation was running. See:
            // https://github.com/angular/components/issues/16215. Note that we only want to do this
            // if the focus isn't inside the dialog already, because it's possible that the consumer
            // turned off `autoFocus` in order to move focus themselves.
            if (activeElement !== element && !element.contains(activeElement)) {
                element.focus();
            }
        }
    }
    /**
     * Restores focus to the element that was focused before the dialog opened.
     * @private
     * @return {?}
     */
    _restoreFocus() {
        /** @type {?} */
        const toFocus = this._elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {
            toFocus.focus();
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
    /**
     * Saves a reference to the element that was focused before the dialog was opened.
     * @private
     * @return {?}
     */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));
            // Note that there is no focus method when rendering on the server.
            if (this._elementRef.nativeElement.focus) {
                // Move focus onto the dialog immediately in order to prevent the user from accidentally
                // opening multiple dialogs at the same time. Needs to be async, because the element
                // may not be focusable immediately.
                Promise.resolve().then((/**
                 * @return {?}
                 */
                () => this._elementRef.nativeElement.focus()));
            }
        }
    }
    /**
     * Callback, invoked whenever an animation on the host completes.
     * @param {?} event
     * @return {?}
     */
    _onAnimationDone(event) {
        if (event.toState === 'enter') {
            this._trapFocus();
        }
        else if (event.toState === 'exit') {
            this._restoreFocus();
        }
        this._animationStateChanged.emit(event);
    }
    /**
     * Callback, invoked when an animation on the host starts.
     * @param {?} event
     * @return {?}
     */
    _onAnimationStart(event) {
        this._animationStateChanged.emit(event);
    }
    /**
     * Starts the dialog exit animation.
     * @return {?}
     */
    _startExitAnimation() {
        this._state = 'exit';
        // Mark the container for check so it can react if the
        // view container is using OnPush change detection.
        this._changeDetectorRef.markForCheck();
    }
}
MatDialogContainer.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{selector: 'mat-dialog-container',
                template: "<ng-template cdkPortalOutlet></ng-template>",
                styles: [".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}"],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.
                // tslint:disable-next-line:validate-decorators
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].Default,
                animations: [matDialogAnimations.dialogContainer],
                host: {
                    'class': 'mat-dialog-container',
                    'tabindex': '-1',
                    'aria-modal': 'true',
                    '[attr.id]': '_id',
                    '[attr.role]': '_config.role',
                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',
                    '[attr.aria-label]': '_config.ariaLabel',
                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',
                    '[@dialogContainer]': '_state',
                    '(@dialogContainer.start)': '_onAnimationStart($event)',
                    '(@dialogContainer.done)': '_onAnimationDone($event)',
                },
            },] },
];
/** @nocollapse */
MatDialogContainer.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__["FocusTrapFactory"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],] }] },
    { type: MatDialogConfig }
];
MatDialogContainer.propDecorators = {
    _portalOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["CdkPortalOutlet"], { static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO(jelbourn): resizing
// Counter for unique dialog ids.
/** @type {?} */
let uniqueId = 0;
/**
 * Reference to a dialog opened via the MatDialog service.
 * @template T, R
 */
class MatDialogRef {
    /**
     * @param {?} _overlayRef
     * @param {?} _containerInstance
     * @param {?=} _location
     * @param {?=} id
     */
    constructor(_overlayRef, _containerInstance, 
    // @breaking-change 8.0.0 `_location` parameter to be removed.
    _location, id = `mat-dialog-${uniqueId++}`) {
        this._overlayRef = _overlayRef;
        this._containerInstance = _containerInstance;
        this.id = id;
        /**
         * Whether the user is allowed to close the dialog.
         */
        this.disableClose = this._containerInstance._config.disableClose;
        /**
         * Subject for notifying the user that the dialog has finished opening.
         */
        this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        /**
         * Subject for notifying the user that the dialog has finished closing.
         */
        this._afterClosed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        /**
         * Subject for notifying the user that the dialog has started closing.
         */
        this._beforeClosed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        /**
         * Current state of the dialog.
         */
        this._state = 0 /* OPEN */;
        // Pass the id along to the container.
        _containerInstance._id = id;
        // Emit when opening animation completes
        _containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        event => event.phaseName === 'done' && event.toState === 'enter')), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this._afterOpened.next();
            this._afterOpened.complete();
        }));
        // Dispose overlay when closing animation is complete
        _containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        event => event.phaseName === 'done' && event.toState === 'exit')), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1)).subscribe((/**
         * @return {?}
         */
        () => {
            clearTimeout(this._closeFallbackTimeout);
            this._overlayRef.dispose();
        }));
        _overlayRef.detachments().subscribe((/**
         * @return {?}
         */
        () => {
            this._beforeClosed.next(this._result);
            this._beforeClosed.complete();
            this._afterClosed.next(this._result);
            this._afterClosed.complete();
            this.componentInstance = (/** @type {?} */ (null));
            this._overlayRef.dispose();
        }));
        _overlayRef.keydownEvents()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ESCAPE"] && !this.disableClose && !Object(_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["hasModifierKey"])(event);
        })))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            event.preventDefault();
            this.close();
        }));
    }
    /**
     * Close the dialog.
     * @param {?=} dialogResult Optional result to return to the dialog opener.
     * @return {?}
     */
    close(dialogResult) {
        this._result = dialogResult;
        // Transition the backdrop in parallel to the dialog.
        this._containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        event => event.phaseName === 'start')), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this._beforeClosed.next(dialogResult);
            this._beforeClosed.complete();
            this._state = 2 /* CLOSED */;
            this._overlayRef.detachBackdrop();
            // The logic that disposes of the overlay depends on the exit animation completing, however
            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback
            // timeout which will clean everything up if the animation hasn't fired within the specified
            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the
            // vast majority of cases the timeout will have been cleared before it has the chance to fire.
            this._closeFallbackTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this._overlayRef.dispose();
            }), event.totalTime + 100);
        }));
        this._containerInstance._startExitAnimation();
        this._state = 1 /* CLOSING */;
    }
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     * @return {?}
     */
    afterOpened() {
        return this._afterOpened.asObservable();
    }
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     * @return {?}
     */
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    /**
     * Gets an observable that is notified when the dialog has started closing.
     * @return {?}
     */
    beforeClosed() {
        return this._beforeClosed.asObservable();
    }
    /**
     * Gets an observable that emits when the overlay's backdrop has been clicked.
     * @return {?}
     */
    backdropClick() {
        return this._overlayRef.backdropClick();
    }
    /**
     * Gets an observable that emits when keydown events are targeted on the overlay.
     * @return {?}
     */
    keydownEvents() {
        return this._overlayRef.keydownEvents();
    }
    /**
     * Updates the dialog's position.
     * @template THIS
     * @this {THIS}
     * @param {?=} position New dialog position.
     * @return {THIS}
     */
    updatePosition(position) {
        /** @type {?} */
        let strategy = (/** @type {?} */ (this))._getPositionStrategy();
        if (position && (position.left || position.right)) {
            position.left ? strategy.left(position.left) : strategy.right(position.right);
        }
        else {
            strategy.centerHorizontally();
        }
        if (position && (position.top || position.bottom)) {
            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);
        }
        else {
            strategy.centerVertically();
        }
        (/** @type {?} */ (this))._overlayRef.updatePosition();
        return (/** @type {?} */ (this));
    }
    /**
     * Updates the dialog's width and height.
     * @template THIS
     * @this {THIS}
     * @param {?=} width New width of the dialog.
     * @param {?=} height New height of the dialog.
     * @return {THIS}
     */
    updateSize(width = '', height = '') {
        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);
        (/** @type {?} */ (this))._overlayRef.updatePosition();
        return (/** @type {?} */ (this));
    }
    /**
     * Add a CSS class or an array of classes to the overlay pane.
     * @template THIS
     * @this {THIS}
     * @param {?} classes
     * @return {THIS}
     */
    addPanelClass(classes) {
        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);
        return (/** @type {?} */ (this));
    }
    /**
     * Remove a CSS class or an array of classes from the overlay pane.
     * @template THIS
     * @this {THIS}
     * @param {?} classes
     * @return {THIS}
     */
    removePanelClass(classes) {
        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);
        return (/** @type {?} */ (this));
    }
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     * @deprecated Use `afterOpened` instead.
     * \@breaking-change 8.0.0
     * @return {?}
     */
    afterOpen() {
        return this.afterOpened();
    }
    /**
     * Gets an observable that is notified when the dialog has started closing.
     * @deprecated Use `beforeClosed` instead.
     * \@breaking-change 8.0.0
     * @return {?}
     */
    beforeClose() {
        return this.beforeClosed();
    }
    /**
     * Gets the current state of the dialog's lifecycle.
     * @return {?}
     */
    getState() {
        return this._state;
    }
    /**
     * Fetches the position strategy object from the overlay ref.
     * @private
     * @return {?}
     */
    _getPositionStrategy() {
        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Injection token that can be used to access the data that was passed in to a dialog.
 * @type {?}
 */
const MAT_DIALOG_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MatDialogData');
/**
 * Injection token that can be used to specify default dialog options.
 * @type {?}
 */
const MAT_DIALOG_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-dialog-default-options');
/**
 * Injection token that determines the scroll handling while the dialog is open.
 * @type {?}
 */
const MAT_DIALOG_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-dialog-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {
    return (/**
     * @return {?}
     */
    () => overlay.scrollStrategies.block());
}
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return (/**
     * @return {?}
     */
    () => overlay.scrollStrategies.block());
}
/**
 * \@docs-private
 * @type {?}
 */
const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {
    provide: MAT_DIALOG_SCROLL_STRATEGY,
    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"]],
    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,
};
/**
 * Service to open Material Design modal dialogs.
 */
class MatDialog {
    /**
     * @param {?} _overlay
     * @param {?} _injector
     * @param {?} _location
     * @param {?} _defaultOptions
     * @param {?} scrollStrategy
     * @param {?} _parentDialog
     * @param {?} _overlayContainer
     */
    constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._location = _location;
        this._defaultOptions = _defaultOptions;
        this._parentDialog = _parentDialog;
        this._overlayContainer = _overlayContainer;
        this._openDialogsAtThisLevel = [];
        this._afterAllClosedAtThisLevel = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        this._afterOpenedAtThisLevel = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
        this._ariaHiddenElements = new Map();
        // TODO (jelbourn): tighten the typing right-hand side of this expression.
        /**
         * Stream that emits when all open dialog have finished closing.
         * Will emit on subscribe if there are no open dialogs to begin with.
         */
        this.afterAllClosed = (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["defer"])((/**
         * @return {?}
         */
        () => this.openDialogs.length ?
            this._afterAllClosed :
            this._afterAllClosed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(undefined))))));
        this._scrollStrategy = scrollStrategy;
    }
    /**
     * Keeps track of the currently-open dialogs.
     * @return {?}
     */
    get openDialogs() {
        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
    }
    /**
     * Stream that emits when a dialog has been opened.
     * @return {?}
     */
    get afterOpened() {
        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
    }
    /**
     * Stream that emits when a dialog has been opened.
     * @deprecated Use `afterOpened` instead.
     * \@breaking-change 8.0.0
     * @return {?}
     */
    get afterOpen() {
        return this.afterOpened;
    }
    /**
     * @return {?}
     */
    get _afterAllClosed() {
        /** @type {?} */
        const parent = this._parentDialog;
        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;
    }
    /**
     * Opens a modal dialog containing the given component.
     * @template T, D, R
     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,
     *     or a TemplateRef to instantiate as the dialog content.
     * @param {?=} config Extra configuration options.
     * @return {?} Reference to the newly-opened dialog.
     */
    open(componentOrTemplateRef, config) {
        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());
        if (config.id && this.getDialogById(config.id)) {
            throw Error(`Dialog with id "${config.id}" exists already. The dialog id must be unique.`);
        }
        /** @type {?} */
        const overlayRef = this._createOverlay(config);
        /** @type {?} */
        const dialogContainer = this._attachDialogContainer(overlayRef, config);
        /** @type {?} */
        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);
        // If this is the first dialog that we're opening, hide all the non-overlay content.
        if (!this.openDialogs.length) {
            this._hideNonDialogContentFromAssistiveTechnology();
        }
        this.openDialogs.push(dialogRef);
        dialogRef.afterClosed().subscribe((/**
         * @return {?}
         */
        () => this._removeOpenDialog(dialogRef)));
        this.afterOpened.next(dialogRef);
        return dialogRef;
    }
    /**
     * Closes all of the currently-open dialogs.
     * @return {?}
     */
    closeAll() {
        this._closeDialogs(this.openDialogs);
    }
    /**
     * Finds an open dialog by its id.
     * @param {?} id ID to use when looking up the dialog.
     * @return {?}
     */
    getDialogById(id) {
        return this.openDialogs.find((/**
         * @param {?} dialog
         * @return {?}
         */
        dialog => dialog.id === id));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Only close the dialogs at this level on destroy
        // since the parent service may still be active.
        this._closeDialogs(this._openDialogsAtThisLevel);
        this._afterAllClosedAtThisLevel.complete();
        this._afterOpenedAtThisLevel.complete();
    }
    /**
     * Creates the overlay into which the dialog will be loaded.
     * @private
     * @param {?} config The dialog configuration.
     * @return {?} A promise resolving to the OverlayRef for the created overlay.
     */
    _createOverlay(config) {
        /** @type {?} */
        const overlayConfig = this._getOverlayConfig(config);
        return this._overlay.create(overlayConfig);
    }
    /**
     * Creates an overlay config from a dialog config.
     * @private
     * @param {?} dialogConfig The dialog configuration.
     * @return {?} The overlay configuration.
     */
    _getOverlayConfig(dialogConfig) {
        /** @type {?} */
        const state$$1 = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayConfig"]({
            positionStrategy: this._overlay.position().global(),
            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),
            panelClass: dialogConfig.panelClass,
            hasBackdrop: dialogConfig.hasBackdrop,
            direction: dialogConfig.direction,
            minWidth: dialogConfig.minWidth,
            minHeight: dialogConfig.minHeight,
            maxWidth: dialogConfig.maxWidth,
            maxHeight: dialogConfig.maxHeight,
            disposeOnNavigation: dialogConfig.closeOnNavigation
        });
        if (dialogConfig.backdropClass) {
            state$$1.backdropClass = dialogConfig.backdropClass;
        }
        return state$$1;
    }
    /**
     * Attaches an MatDialogContainer to a dialog's already-created overlay.
     * @private
     * @param {?} overlay Reference to the dialog's underlying overlay.
     * @param {?} config The dialog configuration.
     * @return {?} A promise resolving to a ComponentRef for the attached container.
     */
    _attachDialogContainer(overlay, config) {
        /** @type {?} */
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        /** @type {?} */
        const injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, new WeakMap([
            [MatDialogConfig, config]
        ]));
        /** @type {?} */
        const containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);
        /** @type {?} */
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    /**
     * Attaches the user-provided component to the already-created MatDialogContainer.
     * @private
     * @template T, R
     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,
     *     or a TemplateRef to instantiate as the content.
     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.
     * @param {?} overlayRef Reference to the overlay in which the dialog resides.
     * @param {?} config The dialog configuration.
     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.
     */
    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {
        // Create a reference to the dialog we're creating in order to give the user a handle
        // to modify and close it.
        /** @type {?} */
        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);
        // When the dialog backdrop is clicked, we want to close it.
        if (config.hasBackdrop) {
            overlayRef.backdropClick().subscribe((/**
             * @return {?}
             */
            () => {
                if (!dialogRef.disableClose) {
                    dialogRef.close();
                }
            }));
        }
        if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]) {
            dialogContainer.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["TemplatePortal"](componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));
        }
        else {
            /** @type {?} */
            const injector = this._createInjector(config, dialogRef, dialogContainer);
            /** @type {?} */
            const contentRef = dialogContainer.attachComponentPortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](componentOrTemplateRef, undefined, injector));
            dialogRef.componentInstance = contentRef.instance;
        }
        dialogRef
            .updateSize(config.width, config.height)
            .updatePosition(config.position);
        return dialogRef;
    }
    /**
     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
     * of a dialog to close itself and, optionally, to return a value.
     * @private
     * @template T
     * @param {?} config Config object that is used to construct the dialog.
     * @param {?} dialogRef Reference to the dialog.
     * @param {?} dialogContainer
     * @return {?} The custom injector that can be used inside the dialog.
     */
    _createInjector(config, dialogRef, dialogContainer) {
        /** @type {?} */
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's
        // content are created out of the same ViewContainerRef and as such, are siblings for injector
        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly
        // added to the injection tokens.
        /** @type {?} */
        const injectionTokens = new WeakMap([
            [MatDialogContainer, dialogContainer],
            [MAT_DIALOG_DATA, config.data],
            [MatDialogRef, dialogRef]
        ]);
        if (config.direction &&
            (!userInjector || !userInjector.get(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"], null))) {
            injectionTokens.set(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__["Directionality"], {
                value: config.direction,
                change: Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])()
            });
        }
        return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalInjector"](userInjector || this._injector, injectionTokens);
    }
    /**
     * Removes a dialog from the array of open dialogs.
     * @private
     * @param {?} dialogRef Dialog to be removed.
     * @return {?}
     */
    _removeOpenDialog(dialogRef) {
        /** @type {?} */
        const index = this.openDialogs.indexOf(dialogRef);
        if (index > -1) {
            this.openDialogs.splice(index, 1);
            // If all the dialogs were closed, remove/restore the `aria-hidden`
            // to a the siblings and emit to the `afterAllClosed` stream.
            if (!this.openDialogs.length) {
                this._ariaHiddenElements.forEach((/**
                 * @param {?} previousValue
                 * @param {?} element
                 * @return {?}
                 */
                (previousValue, element) => {
                    if (previousValue) {
                        element.setAttribute('aria-hidden', previousValue);
                    }
                    else {
                        element.removeAttribute('aria-hidden');
                    }
                }));
                this._ariaHiddenElements.clear();
                this._afterAllClosed.next();
            }
        }
    }
    /**
     * Hides all of the content that isn't an overlay from assistive technology.
     * @private
     * @return {?}
     */
    _hideNonDialogContentFromAssistiveTechnology() {
        /** @type {?} */
        const overlayContainer = this._overlayContainer.getContainerElement();
        // Ensure that the overlay container is attached to the DOM.
        if (overlayContainer.parentElement) {
            /** @type {?} */
            const siblings = overlayContainer.parentElement.children;
            for (let i = siblings.length - 1; i > -1; i--) {
                /** @type {?} */
                let sibling = siblings[i];
                if (sibling !== overlayContainer &&
                    sibling.nodeName !== 'SCRIPT' &&
                    sibling.nodeName !== 'STYLE' &&
                    !sibling.hasAttribute('aria-live')) {
                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));
                    sibling.setAttribute('aria-hidden', 'true');
                }
            }
        }
    }
    /**
     * Closes all of the dialogs in an array.
     * @private
     * @param {?} dialogs
     * @return {?}
     */
    _closeDialogs(dialogs) {
        /** @type {?} */
        let i = dialogs.length;
        while (i--) {
            // The `_openDialogs` property isn't updated after close until the rxjs subscription
            // runs on the next microtask, in addition to modifying the array as we're going
            // through it. We loop through all of them and call close without assuming that
            // they'll be removed from the list instantaneously.
            dialogs[i].close();
        }
    }
}
MatDialog.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] },
];
/** @nocollapse */
MatDialog.ctorParameters = () => [
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: MatDialogConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },
    { type: MatDialog, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"] }] },
    { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayContainer"] }
];
/**
 * Applies default options to the dialog config.
 * @param {?=} config Config to be modified.
 * @param {?=} defaultOptions Default options provided.
 * @return {?} The new configuration object.
 */
function _applyConfigDefaults(config, defaultOptions) {
    return Object.assign({}, defaultOptions, config);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Counter used to generate unique IDs for dialog elements.
 * @type {?}
 */
let dialogElementUid = 0;
/**
 * Button that will close the current dialog.
 */
class MatDialogClose {
    /**
     * @param {?} dialogRef
     * @param {?} _elementRef
     * @param {?} _dialog
     */
    constructor(dialogRef, _elementRef, _dialog) {
        this.dialogRef = dialogRef;
        this._elementRef = _elementRef;
        this._dialog = _dialog;
        /**
         * Default to "button" to prevents accidental form submits.
         */
        this.type = 'button';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.dialogRef) {
            // When this directive is included in a dialog via TemplateRef (rather than being
            // in a Component), the DialogRef isn't available via injection because embedded
            // views cannot be given a custom injector. Instead, we look up the DialogRef by
            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
            // be resolved at constructor time.
            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];
        if (proxiedChange) {
            this.dialogResult = proxiedChange.currentValue;
        }
    }
}
MatDialogClose.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mat-dialog-close], [matDialogClose]',
                exportAs: 'matDialogClose',
                host: {
                    '(click)': 'dialogRef.close(dialogResult)',
                    '[attr.aria-label]': 'ariaLabel || null',
                    '[attr.type]': 'type',
                }
            },] },
];
/** @nocollapse */
MatDialogClose.ctorParameters = () => [
    { type: MatDialogRef, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: MatDialog }
];
MatDialogClose.propDecorators = {
    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['aria-label',] }],
    type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    dialogResult: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mat-dialog-close',] }],
    _matDialogClose: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matDialogClose',] }]
};
/**
 * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
 */
class MatDialogTitle {
    /**
     * @param {?} _dialogRef
     * @param {?} _elementRef
     * @param {?} _dialog
     */
    constructor(_dialogRef, _elementRef, _dialog) {
        this._dialogRef = _dialogRef;
        this._elementRef = _elementRef;
        this._dialog = _dialog;
        this.id = `mat-dialog-title-${dialogElementUid++}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this._dialogRef) {
            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));
        }
        if (this._dialogRef) {
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const container = this._dialogRef._containerInstance;
                if (container && !container._ariaLabelledBy) {
                    container._ariaLabelledBy = this.id;
                }
            }));
        }
    }
}
MatDialogTitle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: '[mat-dialog-title], [matDialogTitle]',
                exportAs: 'matDialogTitle',
                host: {
                    'class': 'mat-dialog-title',
                    '[id]': 'id',
                },
            },] },
];
/** @nocollapse */
MatDialogTitle.ctorParameters = () => [
    { type: MatDialogRef, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: MatDialog }
];
MatDialogTitle.propDecorators = {
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};
/**
 * Scrollable content container of a dialog.
 */
class MatDialogContent {
}
MatDialogContent.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,
                host: { 'class': 'mat-dialog-content' }
            },] },
];
/**
 * Container for the bottom action buttons in a dialog.
 * Stays fixed to the bottom when scrolling.
 */
class MatDialogActions {
}
MatDialogActions.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,
                host: { 'class': 'mat-dialog-actions' }
            },] },
];
/**
 * Finds the closest MatDialogRef to an element by looking at the DOM.
 * @param {?} element Element relative to which to look for a dialog.
 * @param {?} openDialogs References to the currently-open dialogs.
 * @return {?}
 */
function getClosestDialog(element, openDialogs) {
    /** @type {?} */
    let parent = element.nativeElement.parentElement;
    while (parent && !parent.classList.contains('mat-dialog-container')) {
        parent = parent.parentElement;
    }
    return parent ? openDialogs.find((/**
     * @param {?} dialog
     * @return {?}
     */
    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatDialogModule {
}
MatDialogModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                imports: [
                    _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                    _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayModule"],
                    _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["PortalModule"],
                    _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatCommonModule"],
                ],
                exports: [
                    MatDialogContainer,
                    MatDialogClose,
                    MatDialogTitle,
                    MatDialogContent,
                    MatDialogActions,
                    _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatCommonModule"],
                ],
                declarations: [
                    MatDialogContainer,
                    MatDialogClose,
                    MatDialogTitle,
                    MatDialogActions,
                    MatDialogContent,
                ],
                providers: [
                    MatDialog,
                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,
                ],
                entryComponents: [MatDialogContainer],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=dialog.js.map


/***/ }),

/***/ "./node_modules/@angular/material/esm2015/slide-toggle.js":
/*!****************************************************************!*\
  !*** ./node_modules/@angular/material/esm2015/slide-toggle.js ***!
  \****************************************************************/
/*! exports provided: _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_MatSlideToggleRequiredValidatorModule", function() { return _MatSlideToggleRequiredValidatorModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggleModule", function() { return MatSlideToggleModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_VALUE_ACCESSOR", function() { return MAT_SLIDE_TOGGLE_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggleChange", function() { return MatSlideToggleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggle", function() { return MatSlideToggle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS", function() { return MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR", function() { return MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatSlideToggleRequiredValidator", function() { return MatSlideToggleRequiredValidator; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm2015/a11y.js");
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm2015/bidi.js");
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm2015/coercion.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm2015/core.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
/* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm2015/observers.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */










/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Injection token to be used to override the default options for `mat-slide-toggle`.
 * @type {?}
 */
const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-slide-toggle-default-options', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    () => ({ disableToggleValue: false, disableDragValue: false }))
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Increasing integer for generating unique ids for slide-toggle components.
/** @type {?} */
let nextUniqueId = 0;
/**
 * \@docs-private
 * @type {?}
 */
const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => MatSlideToggle)),
    multi: true
};
/**
 * Change event object emitted by a MatSlideToggle.
 */
class MatSlideToggleChange {
    /**
     * @param {?} source
     * @param {?} checked
     */
    constructor(source, checked) {
        this.source = source;
        this.checked = checked;
    }
}
// Boilerplate for applying mixins to MatSlideToggle.
/**
 * \@docs-private
 */
class MatSlideToggleBase {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
/** @type {?} */
const _MatSlideToggleMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisabled"])(MatSlideToggleBase)), 'accent'));
/**
 * Represents a slidable "switch" toggle that can be moved between on and off.
 */
class MatSlideToggle extends _MatSlideToggleMixinBase {
    /**
     * @param {?} elementRef
     * @param {?} _focusMonitor
     * @param {?} _changeDetectorRef
     * @param {?} tabIndex
     * @param {?} _ngZone
     * @param {?} defaults
     * @param {?=} _animationMode
     * @param {?=} _dir
     */
    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {
        super(elementRef);
        this._focusMonitor = _focusMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this.defaults = defaults;
        this._animationMode = _animationMode;
        this._dir = _dir;
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;
        this._required = false;
        this._checked = false;
        /**
         * Whether the thumb is currently being dragged.
         */
        this._dragging = false;
        /**
         * Name value will be applied to the input element if present.
         */
        this.name = null;
        /**
         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.
         */
        this.id = this._uniqueId;
        /**
         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.
         */
        this.labelPosition = 'after';
        /**
         * Used to set the aria-label attribute on the underlying input element.
         */
        this.ariaLabel = null;
        /**
         * Used to set the aria-labelledby attribute on the underlying input element.
         */
        this.ariaLabelledby = null;
        /**
         * An event will be dispatched each time the slide-toggle changes its value.
         */
        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * An event will be dispatched each time the slide-toggle input is toggled.
         * This event is always emitted when the user toggles the slide toggle, but this does not mean
         * the slide toggle's value has changed. The event does not fire when the user drags to change
         * the slide toggle value.
         */
        this.toggleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * An event will be dispatched each time the slide-toggle is dragged.
         * This event is always emitted when the user drags the slide toggle to make a change greater
         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when
         * the user toggles the slide toggle to change its value.
         */
        this.dragChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.tabIndex = parseInt(tabIndex) || 0;
    }
    /**
     * Whether the slide-toggle is required.
     * @return {?}
     */
    get required() { return this._required; }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) { this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value); }
    /**
     * Whether the slide-toggle element is checked or not.
     * @return {?}
     */
    get checked() { return this._checked; }
    /**
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        this._checked = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Returns the unique id for the visual hidden input.
     * @return {?}
     */
    get inputId() { return `${this.id || this._uniqueId}-input`; }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._focusMonitor
            .monitor(this._elementRef, true)
            .subscribe((/**
         * @param {?} focusOrigin
         * @return {?}
         */
        focusOrigin => {
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state
                // change (such as a form control's 'ng-touched') will cause a changed-after-checked
                // error. See https://github.com/angular/angular/issues/17793. To work around this,
                // we defer telling the form control it has been touched until the next tick.
                Promise.resolve().then((/**
                 * @return {?}
                 */
                () => this._onTouched()));
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    /**
     * Method being called whenever the underlying input emits a change event.
     * @param {?} event
     * @return {?}
     */
    _onChangeEvent(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the component's `change` output.
        event.stopPropagation();
        if (!this._dragging) {
            this.toggleChange.emit();
        }
        // Releasing the pointer over the `<label>` element while dragging triggers another
        // click event on the `<label>` element. This means that the checked state of the underlying
        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config
        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value
        // does not change, and the checked state of the underlying input needs to be changed back.
        if (this._dragging || this.defaults.disableToggleValue) {
            this._inputElement.nativeElement.checked = this.checked;
            return;
        }
        // Sync the value from the underlying input element with the component instance.
        this.checked = this._inputElement.nativeElement.checked;
        // Emit our custom change event only if the underlying input emitted one. This ensures that
        // there is no change event, when the checked state changes programmatically.
        this._emitChangeEvent();
    }
    /**
     * Method being called whenever the slide-toggle has been clicked.
     * @param {?} event
     * @return {?}
     */
    _onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `slide-toggle` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.checked = !!value;
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * Implemented as part of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Implemented as a part of ControlValueAccessor.
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Focuses the slide-toggle.
     * @param {?=} options
     * @return {?}
     */
    focus(options) {
        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);
    }
    /**
     * Toggles the checked state of the slide-toggle.
     * @return {?}
     */
    toggle() {
        this.checked = !this.checked;
        this._onChange(this.checked);
    }
    /**
     * Emits a change event on the `change` output. Also notifies the FormControl about the change.
     * @private
     * @return {?}
     */
    _emitChangeEvent() {
        this._onChange(this.checked);
        this.change.emit(new MatSlideToggleChange(this, this.checked));
    }
    /**
     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.
     * @private
     * @param {?} distance
     * @return {?}
     */
    _getDragPercentage(distance) {
        /** @type {?} */
        let percentage = (distance / this._thumbBarWidth) * 100;
        // When the toggle was initially checked, then we have to start the drag at the end.
        if (this._previousChecked) {
            percentage += 100;
        }
        return Math.max(0, Math.min(percentage, 100));
    }
    /**
     * @return {?}
     */
    _onDragStart() {
        if (!this.disabled && !this._dragging) {
            /** @type {?} */
            const thumbEl = this._thumbEl.nativeElement;
            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;
            thumbEl.classList.add('mat-dragging');
            this._previousChecked = this.checked;
            this._dragging = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onDrag(event) {
        if (this._dragging) {
            /** @type {?} */
            const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;
            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);
            // Calculate the moved distance based on the thumb bar width.
            /** @type {?} */
            const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;
            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;
        }
    }
    /**
     * @return {?}
     */
    _onDragEnd() {
        if (this._dragging) {
            /** @type {?} */
            const newCheckedValue = this._dragPercentage > 50;
            if (newCheckedValue !== this.checked) {
                this.dragChange.emit();
                if (!this.defaults.disableDragValue) {
                    this.checked = newCheckedValue;
                    this._emitChangeEvent();
                }
            }
            // The drag should be stopped outside of the current event handler, otherwise the
            // click event will be fired before it and will revert the drag change.
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => setTimeout((/**
             * @return {?}
             */
            () => {
                if (this._dragging) {
                    this._dragging = false;
                    this._thumbEl.nativeElement.classList.remove('mat-dragging');
                    // Reset the transform because the component will take care
                    // of the thumb position after drag.
                    this._thumbEl.nativeElement.style.transform = '';
                }
            }))));
        }
    }
    /**
     * Method being called whenever the label text changes.
     * @return {?}
     */
    _onLabelTextChange() {
        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the
        // slide-toggle component will be only marked for check, but no actual change detection runs
        // automatically. Instead of going back into the zone in order to trigger a change detection
        // which causes *all* components to be checked (if explicitly marked or not using OnPush),
        // we only trigger an explicit change detection for the slide-toggle view and its children.
        this._changeDetectorRef.detectChanges();
    }
}
MatSlideToggle.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{selector: 'mat-slide-toggle',
                exportAs: 'matSlideToggle',
                host: {
                    'class': 'mat-slide-toggle',
                    '[id]': 'id',
                    // Needs to be `-1` so it can still receive programmatic focus.
                    '[attr.tabindex]': 'disabled ? null : -1',
                    '[attr.aria-label]': 'null',
                    '[attr.aria-labelledby]': 'null',
                    '[class.mat-checked]': 'checked',
                    '[class.mat-disabled]': 'disabled',
                    '[class.mat-slide-toggle-label-before]': 'labelPosition == "before"',
                    '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
                    '(focus)': '_inputElement.nativeElement.focus()',
                },
                template: "<label [attr.for]=\"inputId\" class=\"mat-slide-toggle-label\" #label><div #toggleBar class=\"mat-slide-toggle-bar\" [class.mat-slide-toggle-bar-no-side-margin]=\"!labelContent.textContent || !labelContent.textContent.trim()\"><input #input class=\"mat-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\" role=\"switch\" [id]=\"inputId\" [required]=\"required\" [tabIndex]=\"tabIndex\" [checked]=\"checked\" [disabled]=\"disabled\" [attr.name]=\"name\" [attr.aria-checked]=\"checked.toString()\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\"><div class=\"mat-slide-toggle-thumb-container\" #thumbContainer (slidestart)=\"_onDragStart()\" (slide)=\"_onDrag($event)\" (slideend)=\"_onDragEnd()\"><div class=\"mat-slide-toggle-thumb\"></div><div class=\"mat-slide-toggle-ripple\" mat-ripple [matRippleTrigger]=\"label\" [matRippleDisabled]=\"disableRipple || disabled\" [matRippleCentered]=\"true\" [matRippleRadius]=\"20\" [matRippleAnimation]=\"{enterDuration: 150}\"><div class=\"mat-ripple-element mat-slide-toggle-persistent-ripple\"></div></div></div></div><span class=\"mat-slide-toggle-content\" #labelContent (cdkObserveContent)=\"_onLabelTextChange()\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></span></label>",
                styles: [".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}"],
                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],
                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],
                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
            },] },
];
/** @nocollapse */
MatSlideToggle.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['tabindex',] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["ANIMATION_MODULE_TYPE"],] }] },
    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
];
MatSlideToggle.propDecorators = {
    _thumbEl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['thumbContainer', { static: false },] }],
    _thumbBarEl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['toggleBar', { static: false },] }],
    name: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    labelPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ariaLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-label',] }],
    ariaLabelledby: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-labelledby',] }],
    required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    checked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    toggleChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dragChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    _inputElement: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input', { static: false },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALIDATORS"],
    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((/**
     * @return {?}
     */
    () => MatSlideToggleRequiredValidator)),
    multi: true
};
/**
 * Validator for Material slide-toggle components with the required attribute in a
 * template-driven form. The default validator for required form controls asserts
 * that the control value is not undefined but that is not appropriate for a slide-toggle
 * where the value is always defined.
 *
 * Required slide-toggle form controls are valid when checked.
 */
class MatSlideToggleRequiredValidator extends _angular_forms__WEBPACK_IMPORTED_MODULE_4__["CheckboxRequiredValidator"] {
}
MatSlideToggleRequiredValidator.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                selector: `mat-slide-toggle[required][formControlName],
             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,
                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This module is used by both original and MDC-based slide-toggle implementations.
 */
// tslint:disable-next-line:class-name
class _MatSlideToggleRequiredValidatorModule {
}
_MatSlideToggleRequiredValidatorModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                exports: [MatSlideToggleRequiredValidator],
                declarations: [MatSlideToggleRequiredValidator],
            },] },
];
class MatSlideToggleModule {
}
MatSlideToggleModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [
                    _MatSlideToggleRequiredValidatorModule,
                    _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"],
                    _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"],
                    _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"],
                ],
                exports: [
                    _MatSlideToggleRequiredValidatorModule,
                    MatSlideToggle,
                    _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"]
                ],
                declarations: [MatSlideToggle],
                providers: [
                    { provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["HAMMER_GESTURE_CONFIG"], useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["GestureConfig"] }
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=slide-toggle.js.map


/***/ }),

/***/ "./node_modules/primeng/fesm2015/primeng-password.js":
/*!***********************************************************!*\
  !*** ./node_modules/primeng/fesm2015/primeng-password.js ***!
  \***********************************************************/
/*! exports provided: Password, PasswordModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Password", function() { return Password; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PasswordModule", function() { return PasswordModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var primeng_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! primeng/dom */ "./node_modules/primeng/fesm2015/primeng-dom.js");




var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
let Password = class Password {
    constructor(el, zone) {
        this.el = el;
        this.zone = zone;
        this.promptLabel = 'Enter a password';
        this.weakLabel = 'Weak';
        this.mediumLabel = 'Medium';
        this.strongLabel = 'Strong';
        this.feedback = true;
    }
    set showPassword(show) {
        this.el.nativeElement.type = show ? 'text' : 'password';
    }
    ngDoCheck() {
        this.updateFilledState();
    }
    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding
    onInput(e) {
        this.updateFilledState();
    }
    updateFilledState() {
        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;
    }
    createPanel() {
        this.panel = document.createElement('div');
        this.panel.className = 'ui-password-panel ui-widget ui-state-highlight ui-corner-all';
        this.meter = document.createElement('div');
        this.meter.className = 'ui-password-meter';
        this.info = document.createElement('div');
        this.info.className = 'ui-password-info';
        this.info.textContent = this.promptLabel;
        this.panel.appendChild(this.meter);
        this.panel.appendChild(this.info);
        this.panel.style.minWidth = primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].getOuterWidth(this.el.nativeElement) + 'px';
        document.body.appendChild(this.panel);
    }
    onFocus(e) {
        if (this.feedback) {
            if (!this.panel) {
                this.createPanel();
            }
            this.panel.style.zIndex = String(++primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].zindex);
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].addClass(this.panel, 'ui-password-panel-visible');
                    primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].removeClass(this.panel, 'ui-password-panel-hidden');
                }, 1);
                primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].absolutePosition(this.panel, this.el.nativeElement);
            });
        }
    }
    onBlur(e) {
        if (this.feedback) {
            primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].addClass(this.panel, 'ui-password-panel-hidden');
            primeng_dom__WEBPACK_IMPORTED_MODULE_2__["DomHandler"].removeClass(this.panel, 'ui-password-panel-visible');
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.ngOnDestroy();
                }, 150);
            });
        }
    }
    onKeyup(e) {
        if (this.feedback) {
            let value = e.target.value, label = null, meterPos = null;
            if (value.length === 0) {
                label = this.promptLabel;
                meterPos = '0px 0px';
            }
            else {
                var score = this.testStrength(value);
                if (score < 30) {
                    label = this.weakLabel;
                    meterPos = '0px -10px';
                }
                else if (score >= 30 && score < 80) {
                    label = this.mediumLabel;
                    meterPos = '0px -20px';
                }
                else if (score >= 80) {
                    label = this.strongLabel;
                    meterPos = '0px -30px';
                }
            }
            this.meter.style.backgroundPosition = meterPos;
            this.info.textContent = label;
        }
    }
    testStrength(str) {
        let grade = 0;
        let val;
        val = str.match('[0-9]');
        grade += this.normalize(val ? val.length : 1 / 4, 1) * 25;
        val = str.match('[a-zA-Z]');
        grade += this.normalize(val ? val.length : 1 / 2, 3) * 10;
        val = str.match('[!@#$%^&*?_~.,;=]');
        grade += this.normalize(val ? val.length : 1 / 6, 1) * 35;
        val = str.match('[A-Z]');
        grade += this.normalize(val ? val.length : 1 / 6, 1) * 30;
        grade *= str.length / 8;
        return grade > 100 ? 100 : grade;
    }
    normalize(x, y) {
        let diff = x - y;
        if (diff <= 0)
            return x / y;
        else
            return 1 + 0.5 * (x / (x + y / 4));
    }
    get disabled() {
        return this.el.nativeElement.disabled;
    }
    ngOnDestroy() {
        if (this.panel) {
            document.body.removeChild(this.panel);
            this.panel = null;
            this.meter = null;
            this.info = null;
        }
    }
};
Password.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
];
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])()
], Password.prototype, "promptLabel", void 0);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])()
], Password.prototype, "weakLabel", void 0);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])()
], Password.prototype, "mediumLabel", void 0);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])()
], Password.prototype, "strongLabel", void 0);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])()
], Password.prototype, "feedback", void 0);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])()
], Password.prototype, "showPassword", null);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('input', ['$event'])
], Password.prototype, "onInput", null);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('focus', ['$event'])
], Password.prototype, "onFocus", null);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('blur', ['$event'])
], Password.prototype, "onBlur", null);
__decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('keyup', ['$event'])
], Password.prototype, "onKeyup", null);
Password = __decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"])({
        selector: '[pPassword]',
        host: {
            '[class.ui-inputtext]': 'true',
            '[class.ui-corner-all]': 'true',
            '[class.ui-state-default]': 'true',
            '[class.ui-widget]': 'true',
            '[class.ui-state-filled]': 'filled'
        }
    })
], Password);
let PasswordModule = class PasswordModule {
};
PasswordModule = __decorate([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
        exports: [Password],
        declarations: [Password]
    })
], PasswordModule);

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=primeng-password.js.map


/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/form-mycompany/form-mycompany.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/form-mycompany/form-mycompany.component.html ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"formMyCompany\">\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Nazwa</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('name')\" autofocus type=\"text\" id=\"name\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Nazwa firmy\"\r\n                required autocomplete=\"off\" autofocus>\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('name').hasError('required') && formMyCompany.get('name').touched\">\r\n                musi być wypełnione\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"nip\" class=\"col-sm-3 col-form-label\">NIP</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('nip')\" type=\"text\" id=\"nip\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"NIP\" required\r\n                autocomplete=\"off\">\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('nip').hasError('required') && formMyCompany.get('nip').touched\">\r\n                musi być wypełnione\r\n            </p>\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('nip').hasError('nipFormat') && formMyCompany.get('nip').touched\">\r\n                niepoprawny nip\r\n            </p>\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('nip').hasError('mycompanyExists') && formMyCompany.get('nip').touched\">\r\n                ten numer znajduje się na liście\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"regon\" class=\"col-sm-3 col-form-label\">REGON</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('regon')\" type=\"text\" id=\"regon\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"REGON\"\r\n                autocomplete=\"off\">\r\n            <p class=\"invalid-feedback\"\r\n                *ngIf=\"formMyCompany.get('regon').hasError('regonFormat') && formMyCompany.get('regon').touched\">\r\n                niepoprawny regon\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"contactemail\" class=\"col-sm-3 col-form-label\">EMAIL główny</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('contactemail')\" type=\"text\" id=\"contactemail\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\"\r\n                placeholder=\"Adres email głowny\" autocomplete=\"off\">\r\n        </div>\r\n        <p class=\"invalid-feedback\"\r\n            *ngIf=\"formMyCompany.get('contactemail').hasError('contactemail') && formMyCompany.get('contactemail').touched\">\r\n            niepoprawny email\r\n        </p>\r\n    </div>\r\n\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"fvemail\" class=\"col-sm-3 col-form-label\">EMAIL faktura</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('fvemail')\" type=\"text\" id=\"fvemail\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Adres fv email\"\r\n                autocomplete=\"off\">\r\n        </div>\r\n        <p class=\"invalid-feedback\"\r\n            *ngIf=\"formMyCompany.get('fvemail').hasError('fvemail') && formMyCompany.get('fvemail').touched\">\r\n            niepoprawny email\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label for=\"phonenumber\" class=\"col-sm-3 col-form-label\">Numer telefonu</label>\r\n        <div class=\"col-sm-9\">\r\n            <input [formControl]=\"formMyCompany.get('phonenumber')\" type=\"text\" id=\"phonenumber\"\r\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"numer tel.\"\r\n                autocomplete=\"off\">\r\n        </div>\r\n        <p class=\"invalid-feedback\"\r\n            *ngIf=\"formMyCompany.get('phonenumber').hasError('minLength') && formMyCompany.get('phonenumber').touched\">\r\n            niepoprawny numer telefonu\r\n        </p>\r\n    </div>\r\n\r\n</form>\r\n<hr>\r\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\r\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie dodawania\" matTooltipClass=\"tooltip-red\"\r\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\r\n    <button [disabled]=\"formMyCompany.invalid\" matTooltip=\"Dodaj firmę\" matTooltipClass=\"tooltip-green\"\r\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onAddMyCompany()\"\r\n        label=\"Zapisz\"></button>\r\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.html":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.html ***!
  \***************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"formUpdateMyCompany\">\n\n    <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Nazwa</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('name')\" type=\"text\" id=\"name\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Nazwa firmy\"\n                required autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('name').hasError('required') && formUpdateMyCompany.get('name').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"regon\" class=\"col-sm-3 col-form-label\">REGON</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('regon')\" type=\"text\" id=\"regon\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"REGON\"\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('regon').hasError('regonFormat') && formUpdateMyCompany.get('regon').touched\">\n                niepoprawny regon\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"contactemail\" class=\"col-sm-3 col-form-label\">EMAIL główny</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('contactemail')\" type=\"text\" id=\"contactemail\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\"\n                placeholder=\"Adres email głowny\" autocomplete=\"off\">\n\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('contactemail').hasError('email') && formUpdateMyCompany.get('contactemail').touched\">\n                niepoprawny email\n            </p>\n        </div>\n    </div>\n\n\n    <div class=\"form-group row\">\n        <label for=\"fvemail\" class=\"col-sm-3 col-form-label\">EMAIL faktura</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('fvemail')\" type=\"text\" id=\"fvemail\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Adres fv email\"\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('fvemail').hasError('email') && formUpdateMyCompany.get('fvemail').touched\">\n                niepoprawny email\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"phonenumber\" class=\"col-sm-3 col-form-label\">Numer telefonu</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUpdateMyCompany.get('phonenumber')\" type=\"text\" id=\"phonenumber\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"numer tel.\"\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUpdateMyCompany.get('phonenumber').hasError('minLength') && formUpdateMyCompany.get('phonenumber').touched\">\n                niepoprawny numer telefonu\n            </p>\n        </div>\n    </div>\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie dodawania\" matTooltipClass=\"tooltip-red\"\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button matTooltip=\"Aktualizuj firmę\" matTooltipClass=\"tooltip-green\" class=\"ml-1 ui-button-success\" type=\"button\"\n        pButton icon=\"pi pi-check\" (click)=\"onUpdateMyCompany()\" label=\"Zapisz\"\n        ></button>\n</div>\n<!-- [disabled]=\"formUpdateMyCompany.invalid\" -->");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/mycompany.component.html":
/*!***************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/mycompany.component.html ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"container\">\n    <div class=\"row mb-2 ml-0\">\n        <button (click)=\"backClicked()\" mat-raised-button><i class=\"pi pi-chevron-left\"></i></button>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-2\">\n            <div class=\"bg-white shadow-sm w-100 h-100 p-2 rounded\" style=\"text-align: center;\">\n                <button class=\"w-100\" mat-raised-button color=\"primary\"\n                    (click)=\"openDialogAdd()\">Dodaj firmę</button>\n            </div>\n        </div>\n        <div class=\"col-10\">\n            <div class=\"row\">\n                <p-table #mc [value]=\"mycompanies\" dataKey=\"id\" [filterDelay]=\"0\" [globalFilterFields]=\"['name']\" [resizableColumns]=\"true\" columnResizeMode=\"expand\">\n                    <ng-template pTemplate=\"caption\">\n                        Moje Firmy\n                        <div class=\"ui-table-globalfilter-container\">\n                            <input pInputText type=\"text\" (input)=\"mc.filterGlobal($event.target.value, 'contains')\"\n                                placeholder=\"Wyszukiwarka\" />\n                        </div>\n                    </ng-template>\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <th style=\"width: 40px;\">ID</th>\n                            <th pResizableColumn>Nazwa</th>\n                            <th pResizableColumn>NIP</th>\n                            <th pResizableColumn>REGON</th>\n                            <th pResizableColumn>Email firmy</th>\n                            <th pResizableColumn>Email FV</th>\n                            <th pResizableColumn>Nr. Tel.</th>\n                            <th style=\"width:8em\"></th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-rowData style=\"overflow:unset;\">\n                        <tr>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.id}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.name}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.nip}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.regon}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.contactemail}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.fvemail}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.phonenumber}}\n                            </td>\n                            <td style=\"text-align:center\">\n                                <button matTooltip=\"Edycja firmy\" matTooltipClass=\"tooltip-red\" pButton type=\"button\"\n                                    icon=\"pi pi-pencil\" class=\"ui-button-info edit-button\"\n                                    (click)=\"onEditMyCompany(rowData)\"></button>\n                                <button matTooltip=\"Usuwanie\" matTooltipClass=\"tooltip-red\" pButton type=\"button\"\n                                    icon=\"pi pi-times\" class=\"ml-2 ui-button-info remove-button\"\n                                    (click)=\"onDeleteMyCompant(rowData)\"></button>\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\">\n                        <tr>\n                            <td colspan=\"8\" style=\"text-align:left\">Brak danych.</td>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/settings-main/settings-main.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/settings-main/settings-main.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <a [routerLink]=\"['users']\">\n                <div class=\"card\" style=\"width: 18rem;\">\n                    <div class=\"card-body\">\n                        <div class=\"d-flex flex-row\">\n                            <i class=\"pi pi-users\"></i>\n                            <p class=\"card-text w-100 text-right\">Użytkownicy</p>\n                        </div>\n                    </div>\n                </div>\n            </a>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n            <a [routerLink]=\"['mojafirma']\">\n                <div class=\"card\" style=\"width: 18rem;\">\n                    <div class=\"card-body\">\n                        <div class=\"d-flex flex-row\">\n                            <i class=\"pi pi-home\"></i>\n                            <p class=\"card-text w-100 text-right\">Moje Firmy</p>\n                        </div>\n                    </div>\n                </div>\n            </a>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-password/form-password.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-password/form-password.component.html ***!
  \*****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div>\n    <h5>Zmiana hasła dla użytkownika {{ user.name }}</h5>\n</div>\n<hr>\n<form [formGroup]=\"formPassword\">\n    <div class=\"form-group row\">\n        <label for=\"password\" class=\"col-sm-3 col-form-label\">Hasło</label>\n        <div class=\"col-sm-9\">\n            <input type=\"password\" pPassword [formControl]=\"formPassword.get('password')\" id=\"password\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Hasło\" required\n                autocomplete=\"off\" />\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formPassword.get('password').hasError('required') && formPassword.get('password').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"confirmPassword\" class=\"col-sm-3 col-form-label\">Powtórz hasło</label>\n        <div class=\"col-sm-9\">\n            <input type=\"password\" pPassword [formControl]=\"formPassword.get('confirmPassword')\" id=\"confirmPassword\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Hasło\" required\n                autocomplete=\"off\" />\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formPassword.get('confirmPassword').hasError('required') && formPassword.get('confirmPassword').touched\">\n                musi być wypełnione\n            </p>\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formPassword.get('confirmPassword').hasError('nomatch') && formPassword.get('confirmPassword').touched\">\n                hasła muszą być identyczne\n            </p>\n        </div>\n    </div>\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie\" matTooltipClass=\"tooltip-red\" type=\"button\" pButton\n        icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button [disabled]=\"formPassword.invalid\" matTooltip=\"Zmień hasło\" matTooltipClass=\"tooltip-green\"\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onChangePass()\"\n        label=\"Zapisz\"></button>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-users/form-users.component.html":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-users/form-users.component.html ***!
  \***********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"formUser\">\n\n    <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Imię Nazwisko</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUser.get('name')\" autofocus type=\"text\" id=\"name\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Imię Nazwisko\"\n                required autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('name').hasError('required') && formUser.get('name').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"username\" class=\"col-sm-3 col-form-label\">Login</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUser.get('username')\" type=\"text\" id=\"username\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Login\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('username').hasError('required') && formUser.get('username').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"password\" class=\"col-sm-3 col-form-label\">Hasło</label>\n        <div class=\"col-sm-9\">\n            <input type=\"password\" pPassword [formControl]=\"formUser.get('password')\" id=\"password\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Hasło\" required\n                autocomplete=\"off\" />\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('password').hasError('required') && formUser.get('password').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"active\" class=\"col-sm-3 col-form-label\">Aktywny</label>\n        <div class=\"col-sm-9\">\n            <mat-slide-toggle [formControl]=\"formUser.get('active')\"\n                [color]=\"warn\"\n                [checked]=\"true\">\n                Aktywny\n            </mat-slide-toggle>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"roles\" class=\"col-sm-3 col-form-label\">Role</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUser.get('roles')\" type=\"text\" id=\"roles\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Role\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUser.get('roles').hasError('required') && formUser.get('roles').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie dodawania\" matTooltipClass=\"tooltip-red\"\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button [disabled]=\"formUser.invalid\" matTooltip=\"Dodaj użytkownika\" matTooltipClass=\"tooltip-green\"\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onAddUser()\"\n        label=\"Zapisz\"></button>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-userupdate/form-userupdate.component.html":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-userupdate/form-userupdate.component.html ***!
  \*********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<form [formGroup]=\"formUserUpdate\">\n\n    <div class=\"form-group row\">\n        <label for=\"name\" class=\"col-sm-3 col-form-label\">Imię Nazwisko</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUserUpdate.get('name')\" type=\"text\" id=\"name\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Imię Nazwisko\"\n                required autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUserUpdate.get('name').hasError('required') && formUserUpdate.get('name').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"username\" class=\"col-sm-3 col-form-label\">Login</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUserUpdate.get('username')\" type=\"text\" id=\"username\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Login\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUserUpdate.get('username').hasError('required') && formUserUpdate.get('username').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"active\" class=\"col-sm-3 col-form-label\">Aktywny</label>\n        <div class=\"col-sm-9\">\n            <mat-slide-toggle [formControl]=\"formUserUpdate.get('active')\"\n                [color]=\"warn\"\n                [checked]=\"true\">\n                Aktywny\n            </mat-slide-toggle>\n        </div>\n    </div>\n\n    <div class=\"form-group row\">\n        <label for=\"roles\" class=\"col-sm-3 col-form-label\">Role</label>\n        <div class=\"col-sm-9\">\n            <input [formControl]=\"formUserUpdate.get('roles')\" type=\"text\" id=\"roles\"\n                class=\"form-control ui-inputtext ui-corner-all ui-state-default ui-widget\" placeholder=\"Role\" required\n                autocomplete=\"off\">\n            <p class=\"invalid-feedback\"\n                *ngIf=\"formUserUpdate.get('roles').hasError('required') && formUserUpdate.get('roles').touched\">\n                musi być wypełnione\n            </p>\n        </div>\n    </div>\n\n</form>\n<hr>\n<div class=\"ui-dialog-buttonpane ui-helper-clearfix footer-btn m-1\">\n    <button class=\"ui-dialog-titlebar-close\" matTooltip=\"Anulowanie\" matTooltipClass=\"tooltip-red\"\n        type=\"button\" pButton icon=\"pi pi-times\" (click)=\"onNoClick()\" label=\"Anuluj\"></button>\n    <button [disabled]=\"formUserUpdate.invalid\" matTooltip=\"Aktualizuj użytkownika\" matTooltipClass=\"tooltip-green\"\n        class=\"ui-button-success\" type=\"button\" pButton icon=\"pi pi-check\" (click)=\"onUpdateUser()\"\n        label=\"Zapisz\"></button>\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/users.component.html":
/*!*******************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/users.component.html ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"container\">\n    <div class=\"row mb-2 ml-0\">\n        <button (click)=\"backClicked()\" mat-raised-button><i class=\"pi pi-chevron-left\"></i></button>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-2\">\n            <div class=\"bg-white shadow-sm w-100 h-100 p-2 rounded\" style=\"text-align: center;\">\n                <button class=\"w-100\" mat-raised-button color=\"primary\" (click)=\"openDialogAdd()\">Dodaj\n                    użytkownika</button>\n            </div>\n        </div>\n        <div class=\"col-10\">\n            <div class=\"row\">\n                <p-table #us [value]=\"users\" dataKey=\"id\" [filterDelay]=\"0\" [globalFilterFields]=\"['username']\" [resizableColumns]=\"true\" columnResizeMode=\"expand\">\n                    <ng-template pTemplate=\"caption\">\n                        Użytkownicy\n                        <div class=\"ui-table-globalfilter-container\">\n                            <input pInputText type=\"text\" (input)=\"us.filterGlobal($event.target.value, 'contains')\"\n                                placeholder=\"Wyszukiwarka\" />\n                        </div>\n                    </ng-template>\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <th style=\"width: 40px;\">ID</th>\n                            <th pResizableColumn>Login</th>\n                            <th pResizableColumn>Imie Nazwisko</th>\n                            <th pResizableColumn>Aktywny</th>\n                            <th pResizableColumn>Role</th>\n                            <th style=\"width:8em\"></th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-rowData style=\"overflow:unset;\">\n                        <tr>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.id}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.username}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.name}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.active}}\n                            </td>\n                            <td class=\"ui-resizable-column\">\n                                {{rowData.roles}}\n                            </td>\n                            <td style=\"text-align:center\">\n                                <button matTooltip=\"Edycja Użytkownika\" matTooltipClass=\"tooltip-red\" pButton\n                                    type=\"button\" icon=\"pi pi-pencil\" class=\"ui-button-info edit-button\"\n                                    (click)=\"openDialogUpdate(rowData)\"></button>\n                                <button matTooltip=\"Zmiana hasła\" matTooltipClass=\"tooltip-red\" pButton\n                                    type=\"button\" icon=\"pi pi-key\" class=\"ml-1 ui-button-info edit-button\"\n                                    (click)=\"openDialogChangePass(rowData)\"></button>\n                                <button matTooltip=\"Usuwanie\" matTooltipClass=\"tooltip-red\" pButton type=\"button\"\n                                    icon=\"pi pi-times\" class=\"ml-1 ui-button-info remove-button\"\n                                    (click)=\"onDeleteUser(rowData)\"></button>\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\">\n                        <tr>\n                            <td colspan=\"6\" style=\"text-align:left\">Brak danych.</td>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./src/app/_class/user.ts":
/*!********************************!*\
  !*** ./src/app/_class/user.ts ***!
  \********************************/
/*! exports provided: User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "User", function() { return User; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class User {
}


/***/ }),

/***/ "./src/app/settings/mycompany/form-mycompany/form-mycompany.component.scss":
/*!*********************************************************************************!*\
  !*** ./src/app/settings/mycompany/form-mycompany/form-mycompany.component.scss ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".footer-btn button {\n  margin: 0 0.5em 0 0;\n  width: auto;\n}\n\n.footer-btn {\n  text-align: right;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2V0dGluZ3MvbXljb21wYW55L2Zvcm0tbXljb21wYW55L0M6XFxVc2Vyc1xcU3lsd2VrXFxEZXNrdG9wXFxibS9zcmNcXGFwcFxcc2V0dGluZ3NcXG15Y29tcGFueVxcZm9ybS1teWNvbXBhbnlcXGZvcm0tbXljb21wYW55LmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zZXR0aW5ncy9teWNvbXBhbnkvZm9ybS1teWNvbXBhbnkvZm9ybS1teWNvbXBhbnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxtQkFBQTtFQUNBLFdBQUE7QUNDSjs7QURDQTtFQUNJLGlCQUFBO0FDRUoiLCJmaWxlIjoic3JjL2FwcC9zZXR0aW5ncy9teWNvbXBhbnkvZm9ybS1teWNvbXBhbnkvZm9ybS1teWNvbXBhbnkuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9vdGVyLWJ0biBidXR0b257XHJcbiAgICBtYXJnaW46IDAgMC41ZW0gMCAwO1xyXG4gICAgd2lkdGg6IGF1dG87XHJcbn1cclxuLmZvb3Rlci1idG57XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxufSIsIi5mb290ZXItYnRuIGJ1dHRvbiB7XG4gIG1hcmdpbjogMCAwLjVlbSAwIDA7XG4gIHdpZHRoOiBhdXRvO1xufVxuXG4uZm9vdGVyLWJ0biB7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufSJdfQ== */");

/***/ }),

/***/ "./src/app/settings/mycompany/form-mycompany/form-mycompany.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/settings/mycompany/form-mycompany/form-mycompany.component.ts ***!
  \*******************************************************************************/
/*! exports provided: FormMycompanyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormMycompanyComponent", function() { return FormMycompanyComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/_validators/AppValidators */ "./src/app/_validators/AppValidators.ts");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");







let FormMycompanyComponent = class FormMycompanyComponent {
    constructor(dialogRef, settingService, infoPopup) {
        this.dialogRef = dialogRef;
        this.settingService = settingService;
        this.infoPopup = infoPopup;
    }
    ngOnInit() {
        this.formMyCompany = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroup"]({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required] }),
            nip: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_4__["AppValidators"].validatenip], asyncValidators: [src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_4__["AppValidators"].myCompanyExists], updateOn: 'blur' }),
            regon: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', { validators: [src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_4__["AppValidators"].validateregon9], updateOn: 'blur' }),
            contactemail: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].email] }),
            fvemail: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].email] }),
            phonenumber: new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(9), _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].pattern("^[0-9]*$")] })
        });
    }
    onNoClick() {
        this.dialogRef.close();
    }
    onAddMyCompany() {
        this.settingService.addMyCompany(this.formMyCompany.value).subscribe({
            next: (res) => {
                this.infoPopup.showSuccessAdd("moja firma");
                this.dialogRef.close();
            },
            error: (err) => {
                this.infoPopup.showErrorAdd("moja firma");
            },
            complete: () => { }
        });
    }
};
FormMycompanyComponent.ctorParameters = () => [
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_5__["SettingsService"] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_6__["InfoPopupComponent"] }
];
FormMycompanyComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-form-mycompany',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./form-mycompany.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/form-mycompany/form-mycompany.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./form-mycompany.component.scss */ "./src/app/settings/mycompany/form-mycompany/form-mycompany.component.scss")).default]
    })
], FormMycompanyComponent);



/***/ }),

/***/ "./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.scss":
/*!*************************************************************************************************!*\
  !*** ./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.scss ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL215Y29tcGFueS9mb3JtLXVwZGF0ZS1teS1jb21wYW55L2Zvcm0tdXBkYXRlLW15LWNvbXBhbnkuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.ts ***!
  \***********************************************************************************************/
/*! exports provided: FormUpdateMyCompanyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormUpdateMyCompanyComponent", function() { return FormUpdateMyCompanyComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");
/* harmony import */ var src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/_validators/AppValidators */ "./src/app/_validators/AppValidators.ts");







let FormUpdateMyCompanyComponent = class FormUpdateMyCompanyComponent {
    constructor(dialogRef, settingService, company, infoPopup) {
        this.dialogRef = dialogRef;
        this.settingService = settingService;
        this.company = company;
        this.infoPopup = infoPopup;
    }
    ngOnInit() {
        this.formUpdateMyCompany = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required] }),
            regon: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: [src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_6__["AppValidators"].validateregon9], updateOn: 'blur' }),
            contactemail: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email] }),
            fvemail: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].email] }),
            phonenumber: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].minLength(9), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].pattern("^[0-9]*$")] })
        });
        this.formUpdateMyCompany.patchValue(this.company);
    }
    onNoClick() {
        this.dialogRef.close();
    }
    onUpdateMyCompany() {
        this.settingService.updateMyCompany(this.company.id, this.formUpdateMyCompany.value).subscribe({
            next: (res) => {
                this.infoPopup.showSuccessUpdate("moja firma");
                this.dialogRef.close();
            },
            error: (err) => {
                console.log(err);
                this.infoPopup.showErrorUpdate("moja firma");
            },
            complete: () => { }
        });
    }
};
FormUpdateMyCompanyComponent.ctorParameters = () => [
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_4__["SettingsService"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"],] }] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_5__["InfoPopupComponent"] }
];
FormUpdateMyCompanyComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-form-update-my-company',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./form-update-my-company.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./form-update-my-company.component.scss */ "./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](2, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"]))
], FormUpdateMyCompanyComponent);



/***/ }),

/***/ "./src/app/settings/mycompany/mycompany.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/settings/mycompany/mycompany.component.scss ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL215Y29tcGFueS9teWNvbXBhbnkuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "./src/app/settings/mycompany/mycompany.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/settings/mycompany/mycompany.component.ts ***!
  \***********************************************************/
/*! exports provided: MycompanyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MycompanyComponent", function() { return MycompanyComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");
/* harmony import */ var _form_mycompany_form_mycompany_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form-mycompany/form-mycompany.component */ "./src/app/settings/mycompany/form-mycompany/form-mycompany.component.ts");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/fesm2015/primeng-api.js");
/* harmony import */ var _form_update_my_company_form_update_my_company_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./form-update-my-company/form-update-my-company.component */ "./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.ts");









let MycompanyComponent = class MycompanyComponent {
    constructor(location, dialog, settingService, infoPopup, confirmationService) {
        this.location = location;
        this.dialog = dialog;
        this.settingService = settingService;
        this.infoPopup = infoPopup;
        this.confirmationService = confirmationService;
    }
    ngOnInit() {
        this.loadData();
    }
    loadData() {
        this.settingService.getMyCompanies().subscribe({
            next: (res) => {
                this.mycompanies = res;
            },
            error: (err) => {
                this.infoPopup.showErrorDownload("firm");
            },
            complete: () => {
            }
        });
    }
    openDialogAdd() {
        const dialogRef = this.dialog.open(_form_mycompany_form_mycompany_component__WEBPACK_IMPORTED_MODULE_4__["FormMycompanyComponent"], {
            width: '450px'
        });
        dialogRef.afterClosed().subscribe(result => {
            this.loadData();
            console.log('The dialog was closed');
        });
    }
    onEditMyCompany(company) {
        const dialogRef = this.dialog.open(_form_update_my_company_form_update_my_company_component__WEBPACK_IMPORTED_MODULE_8__["FormUpdateMyCompanyComponent"], {
            data: company,
            width: '450px'
        });
        dialogRef.afterClosed().subscribe(result => {
            this.loadData();
            console.log('The dialog was closed');
        });
    }
    backClicked() {
        this.location.back();
    }
    onDeleteMyCompant(company) {
        this.confirmationService.confirm({
            message: 'Na pewno chcesz usunąć ' + company.name + '?',
            acceptLabel: 'Tak',
            rejectLabel: 'Nie',
            accept: () => {
                this.settingService.deleteMyCompany(company.id).subscribe({
                    next: (res) => {
                        this.infoPopup.showSuccessDelete("moja firma");
                    },
                    error: (err) => {
                        this.infoPopup.showErrorDelete("moja firma");
                    },
                    complete: () => {
                        this.loadData();
                    }
                });
            }
        });
    }
};
MycompanyComponent.ctorParameters = () => [
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_6__["Location"] },
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__["MatDialog"] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_2__["SettingsService"] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_3__["InfoPopupComponent"] },
    { type: primeng_api__WEBPACK_IMPORTED_MODULE_7__["ConfirmationService"] }
];
MycompanyComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-mycompany',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./mycompany.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/mycompany/mycompany.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./mycompany.component.scss */ "./src/app/settings/mycompany/mycompany.component.scss")).default]
    })
], MycompanyComponent);



/***/ }),

/***/ "./src/app/settings/settings-main/settings-main.component.scss":
/*!*********************************************************************!*\
  !*** ./src/app/settings/settings-main/settings-main.component.scss ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLW1haW4vc2V0dGluZ3MtbWFpbi5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "./src/app/settings/settings-main/settings-main.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/settings/settings-main/settings-main.component.ts ***!
  \*******************************************************************/
/*! exports provided: SettingsMainComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettingsMainComponent", function() { return SettingsMainComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let SettingsMainComponent = class SettingsMainComponent {
    constructor() { }
    ngOnInit() {
    }
};
SettingsMainComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-settings-main',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./settings-main.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/settings-main/settings-main.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./settings-main.component.scss */ "./src/app/settings/settings-main/settings-main.component.scss")).default]
    })
], SettingsMainComponent);



/***/ }),

/***/ "./src/app/settings/settings-routing.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/settings/settings-routing.module.ts ***!
  \*****************************************************/
/*! exports provided: SettingsRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettingsRoutingModule", function() { return SettingsRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _settings_main_settings_main_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings-main/settings-main.component */ "./src/app/settings/settings-main/settings-main.component.ts");
/* harmony import */ var _users_users_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./users/users.component */ "./src/app/settings/users/users.component.ts");
/* harmony import */ var _mycompany_mycompany_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mycompany/mycompany.component */ "./src/app/settings/mycompany/mycompany.component.ts");






const routes = [
    { path: '', component: _settings_main_settings_main_component__WEBPACK_IMPORTED_MODULE_3__["SettingsMainComponent"] },
    { path: 'users', component: _users_users_component__WEBPACK_IMPORTED_MODULE_4__["UsersComponent"] },
    { path: 'mojafirma', component: _mycompany_mycompany_component__WEBPACK_IMPORTED_MODULE_5__["MycompanyComponent"] },
];
let SettingsRoutingModule = class SettingsRoutingModule {
};
SettingsRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
    })
], SettingsRoutingModule);



/***/ }),

/***/ "./src/app/settings/settings.module.ts":
/*!*********************************************!*\
  !*** ./src/app/settings/settings.module.ts ***!
  \*********************************************/
/*! exports provided: SettingsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettingsModule", function() { return SettingsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _settings_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings-routing.module */ "./src/app/settings/settings-routing.module.ts");
/* harmony import */ var _settings_main_settings_main_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings-main/settings-main.component */ "./src/app/settings/settings-main/settings-main.component.ts");
/* harmony import */ var _users_users_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./users/users.component */ "./src/app/settings/users/users.component.ts");
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm2015/icon.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/fesm2015/primeng-table.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var primeng_dropdown__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! primeng/dropdown */ "./node_modules/primeng/fesm2015/primeng-dropdown.js");
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! primeng/button */ "./node_modules/primeng/fesm2015/primeng-button.js");
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm2015/tooltip.js");
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! primeng/dialog */ "./node_modules/primeng/fesm2015/primeng-dialog.js");
/* harmony import */ var primeng_fieldset__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! primeng/fieldset */ "./node_modules/primeng/fesm2015/primeng-fieldset.js");
/* harmony import */ var primeng_codehighlighter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! primeng/codehighlighter */ "./node_modules/primeng/fesm2015/primeng-codehighlighter.js");
/* harmony import */ var primeng_tabview__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! primeng/tabview */ "./node_modules/primeng/fesm2015/primeng-tabview.js");
/* harmony import */ var _mycompany_mycompany_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./mycompany/mycompany.component */ "./src/app/settings/mycompany/mycompany.component.ts");
/* harmony import */ var _mycompany_form_mycompany_form_mycompany_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./mycompany/form-mycompany/form-mycompany.component */ "./src/app/settings/mycompany/form-mycompany/form-mycompany.component.ts");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm2015/button.js");
/* harmony import */ var _users_form_users_form_users_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./users/form-users/form-users.component */ "./src/app/settings/users/form-users/form-users.component.ts");
/* harmony import */ var primeng_password__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! primeng/password */ "./node_modules/primeng/fesm2015/primeng-password.js");
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/material/slide-toggle */ "./node_modules/@angular/material/esm2015/slide-toggle.js");
/* harmony import */ var _users_form_password_form_password_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./users/form-password/form-password.component */ "./src/app/settings/users/form-password/form-password.component.ts");
/* harmony import */ var _users_form_userupdate_form_userupdate_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./users/form-userupdate/form-userupdate.component */ "./src/app/settings/users/form-userupdate/form-userupdate.component.ts");
/* harmony import */ var _mycompany_form_update_my_company_form_update_my_company_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./mycompany/form-update-my-company/form-update-my-company.component */ "./src/app/settings/mycompany/form-update-my-company/form-update-my-company.component.ts");


























let SettingsModule = class SettingsModule {
};
SettingsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [_settings_main_settings_main_component__WEBPACK_IMPORTED_MODULE_4__["SettingsMainComponent"], _users_users_component__WEBPACK_IMPORTED_MODULE_5__["UsersComponent"], _mycompany_mycompany_component__WEBPACK_IMPORTED_MODULE_16__["MycompanyComponent"], _mycompany_form_mycompany_form_mycompany_component__WEBPACK_IMPORTED_MODULE_17__["FormMycompanyComponent"], _users_form_users_form_users_component__WEBPACK_IMPORTED_MODULE_20__["FormUsersComponent"], _users_form_password_form_password_component__WEBPACK_IMPORTED_MODULE_23__["FormPasswordComponent"], _users_form_userupdate_form_userupdate_component__WEBPACK_IMPORTED_MODULE_24__["FormUserupdateComponent"], _mycompany_form_update_my_company_form_update_my_company_component__WEBPACK_IMPORTED_MODULE_25__["FormUpdateMyCompanyComponent"]],
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _settings_routing_module__WEBPACK_IMPORTED_MODULE_3__["SettingsRoutingModule"],
            _angular_material_icon__WEBPACK_IMPORTED_MODULE_6__["MatIconModule"],
            _angular_material_button__WEBPACK_IMPORTED_MODULE_19__["MatButtonModule"],
            primeng_table__WEBPACK_IMPORTED_MODULE_7__["TableModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["FormsModule"],
            primeng_dropdown__WEBPACK_IMPORTED_MODULE_9__["DropdownModule"],
            primeng_button__WEBPACK_IMPORTED_MODULE_10__["ButtonModule"],
            _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MatTooltipModule"],
            primeng_dialog__WEBPACK_IMPORTED_MODULE_12__["DialogModule"],
            primeng_fieldset__WEBPACK_IMPORTED_MODULE_13__["FieldsetModule"],
            primeng_codehighlighter__WEBPACK_IMPORTED_MODULE_14__["CodeHighlighterModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_8__["ReactiveFormsModule"],
            primeng_tabview__WEBPACK_IMPORTED_MODULE_15__["TabViewModule"],
            _angular_material_dialog__WEBPACK_IMPORTED_MODULE_18__["MatDialogModule"],
            primeng_password__WEBPACK_IMPORTED_MODULE_21__["PasswordModule"],
            _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_22__["MatSlideToggleModule"]
        ],
        entryComponents: [_mycompany_form_update_my_company_form_update_my_company_component__WEBPACK_IMPORTED_MODULE_25__["FormUpdateMyCompanyComponent"], _users_form_userupdate_form_userupdate_component__WEBPACK_IMPORTED_MODULE_24__["FormUserupdateComponent"], _users_form_password_form_password_component__WEBPACK_IMPORTED_MODULE_23__["FormPasswordComponent"], _users_form_users_form_users_component__WEBPACK_IMPORTED_MODULE_20__["FormUsersComponent"], _mycompany_form_mycompany_form_mycompany_component__WEBPACK_IMPORTED_MODULE_17__["FormMycompanyComponent"]]
    })
], SettingsModule);



/***/ }),

/***/ "./src/app/settings/settings.service.ts":
/*!**********************************************!*\
  !*** ./src/app/settings/settings.service.ts ***!
  \**********************************************/
/*! exports provided: SettingsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettingsService", function() { return SettingsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");



let SettingsService = class SettingsService {
    constructor(http) {
        this.http = http;
    }
    // =============== USERS ============
    getUsers() {
        return this.http.get("api/users");
    }
    addUser(data) {
        return this.http.post("api/user", data);
    }
    updateUser(id, data) {
        return this.http.put("api/user/" + id, data);
    }
    deleteUser(id) {
        return this.http.delete("api/user/" + id);
    }
    changePassword(id, data) {
        return this.http.put("api/user/pass/" + id, data);
    }
    //============== MY COMPANY ===============
    getMyCompanies() {
        return this.http.get("api/mycompanies");
    }
    getMyCompanyById(id) {
        return this.http.get("api/mycompany/" + id);
    }
    addMyCompany(data) {
        return this.http.post("api/mycompany", data);
    }
    updateMyCompany(id, data) {
        return this.http.put("api/mycompany/" + id, data);
    }
    deleteMyCompany(id) {
        return this.http.delete("api/mycompany/" + id);
    }
};
SettingsService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
SettingsService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    })
], SettingsService);



/***/ }),

/***/ "./src/app/settings/users/form-password/form-password.component.scss":
/*!***************************************************************************!*\
  !*** ./src/app/settings/users/form-password/form-password.component.scss ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".footer-btn button {\n  margin: 0 0.5em 0 0;\n  width: auto;\n}\n\n.footer-btn {\n  text-align: right;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS1wYXNzd29yZC9DOlxcVXNlcnNcXFN5bHdla1xcRGVza3RvcFxcYm0vc3JjXFxhcHBcXHNldHRpbmdzXFx1c2Vyc1xcZm9ybS1wYXNzd29yZFxcZm9ybS1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS1wYXNzd29yZC9mb3JtLXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksbUJBQUE7RUFDQSxXQUFBO0FDQ0o7O0FEQ0E7RUFDSSxpQkFBQTtBQ0VKIiwiZmlsZSI6InNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS1wYXNzd29yZC9mb3JtLXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZvb3Rlci1idG4gYnV0dG9ue1xyXG4gICAgbWFyZ2luOiAwIDAuNWVtIDAgMDtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG59XHJcbi5mb290ZXItYnRue1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbn0iLCIuZm9vdGVyLWJ0biBidXR0b24ge1xuICBtYXJnaW46IDAgMC41ZW0gMCAwO1xuICB3aWR0aDogYXV0bztcbn1cblxuLmZvb3Rlci1idG4ge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn0iXX0= */");

/***/ }),

/***/ "./src/app/settings/users/form-password/form-password.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/settings/users/form-password/form-password.component.ts ***!
  \*************************************************************************/
/*! exports provided: FormPasswordComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormPasswordComponent", function() { return FormPasswordComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_class_user__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/_class/user */ "./src/app/_class/user.ts");
/* harmony import */ var src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/_validators/AppValidators */ "./src/app/_validators/AppValidators.ts");








let FormPasswordComponent = class FormPasswordComponent {
    constructor(dialogRef, user, settingService, info, fb) {
        this.dialogRef = dialogRef;
        this.user = user;
        this.settingService = settingService;
        this.info = info;
        this.fb = fb;
    }
    ngOnInit() {
        this.formPassword = this.fb.group({
            password: ['', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required }],
            confirmPassword: ['', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required }]
        }, { validator: src_app_validators_AppValidators__WEBPACK_IMPORTED_MODULE_7__["AppValidators"].nomatch('password', 'confirmPassword') });
    }
    onNoClick() {
        this.dialogRef.close();
    }
    onChangePass() {
        this.settingService.changePassword(this.user.id, this.formPassword.value).subscribe({
            next: (res) => {
                this.info.showSuccessUpdate("hasło użytkownika");
                this.dialogRef.close();
            },
            error: (err) => { this.info.showErrorUpdate("hasło użytkownika"); },
            complete: () => { }
        });
    }
};
FormPasswordComponent.ctorParameters = () => [
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"] },
    { type: src_app_class_user__WEBPACK_IMPORTED_MODULE_6__["User"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"],] }] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_3__["SettingsService"] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_4__["InfoPopupComponent"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"] }
];
FormPasswordComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-form-password',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./form-password.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-password/form-password.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./form-password.component.scss */ "./src/app/settings/users/form-password/form-password.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material_dialog__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"]))
], FormPasswordComponent);



/***/ }),

/***/ "./src/app/settings/users/form-users/form-users.component.scss":
/*!*********************************************************************!*\
  !*** ./src/app/settings/users/form-users/form-users.component.scss ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".footer-btn button {\n  margin: 0 0.5em 0 0;\n  width: auto;\n}\n\n.footer-btn {\n  text-align: right;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS11c2Vycy9DOlxcVXNlcnNcXFN5bHdla1xcRGVza3RvcFxcYm0vc3JjXFxhcHBcXHNldHRpbmdzXFx1c2Vyc1xcZm9ybS11c2Vyc1xcZm9ybS11c2Vycy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS11c2Vycy9mb3JtLXVzZXJzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksbUJBQUE7RUFDQSxXQUFBO0FDQ0o7O0FEQ0E7RUFDSSxpQkFBQTtBQ0VKIiwiZmlsZSI6InNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS11c2Vycy9mb3JtLXVzZXJzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZvb3Rlci1idG4gYnV0dG9ue1xyXG4gICAgbWFyZ2luOiAwIDAuNWVtIDAgMDtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG59XHJcbi5mb290ZXItYnRue1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbn0iLCIuZm9vdGVyLWJ0biBidXR0b24ge1xuICBtYXJnaW46IDAgMC41ZW0gMCAwO1xuICB3aWR0aDogYXV0bztcbn1cblxuLmZvb3Rlci1idG4ge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn0iXX0= */");

/***/ }),

/***/ "./src/app/settings/users/form-users/form-users.component.ts":
/*!*******************************************************************!*\
  !*** ./src/app/settings/users/form-users/form-users.component.ts ***!
  \*******************************************************************/
/*! exports provided: FormUsersComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormUsersComponent", function() { return FormUsersComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");






let FormUsersComponent = class FormUsersComponent {
    constructor(dialogRef, settingService, info) {
        this.dialogRef = dialogRef;
        this.settingService = settingService;
        this.info = info;
    }
    ngOnInit() {
        this.formUser = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
            username: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
            active: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](false),
            roles: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
        });
    }
    onNoClick() {
        this.dialogRef.close();
    }
    onAddUser() {
        this.settingService.addUser(this.formUser.value).subscribe({
            next: (res) => {
                this.info.showSuccessAdd("użytkownika");
                this.dialogRef.close();
            },
            error: (err) => {
                this.info.showErrorAdd("użytkownika");
            },
            complete: () => { }
        });
    }
};
FormUsersComponent.ctorParameters = () => [
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_4__["SettingsService"] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_5__["InfoPopupComponent"] }
];
FormUsersComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-form-users',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./form-users.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-users/form-users.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./form-users.component.scss */ "./src/app/settings/users/form-users/form-users.component.scss")).default]
    })
], FormUsersComponent);



/***/ }),

/***/ "./src/app/settings/users/form-userupdate/form-userupdate.component.scss":
/*!*******************************************************************************!*\
  !*** ./src/app/settings/users/form-userupdate/form-userupdate.component.scss ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".footer-btn button {\n  margin: 0 0.5em 0 0;\n  width: auto;\n}\n\n.footer-btn {\n  text-align: right;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS11c2VydXBkYXRlL0M6XFxVc2Vyc1xcU3lsd2VrXFxEZXNrdG9wXFxibS9zcmNcXGFwcFxcc2V0dGluZ3NcXHVzZXJzXFxmb3JtLXVzZXJ1cGRhdGVcXGZvcm0tdXNlcnVwZGF0ZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc2V0dGluZ3MvdXNlcnMvZm9ybS11c2VydXBkYXRlL2Zvcm0tdXNlcnVwZGF0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLG1CQUFBO0VBQ0EsV0FBQTtBQ0NKOztBRENBO0VBQ0ksaUJBQUE7QUNFSiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3VzZXJzL2Zvcm0tdXNlcnVwZGF0ZS9mb3JtLXVzZXJ1cGRhdGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9vdGVyLWJ0biBidXR0b257XHJcbiAgICBtYXJnaW46IDAgMC41ZW0gMCAwO1xyXG4gICAgd2lkdGg6IGF1dG87XHJcbn1cclxuLmZvb3Rlci1idG57XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxufSIsIi5mb290ZXItYnRuIGJ1dHRvbiB7XG4gIG1hcmdpbjogMCAwLjVlbSAwIDA7XG4gIHdpZHRoOiBhdXRvO1xufVxuXG4uZm9vdGVyLWJ0biB7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufSJdfQ== */");

/***/ }),

/***/ "./src/app/settings/users/form-userupdate/form-userupdate.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/settings/users/form-userupdate/form-userupdate.component.ts ***!
  \*****************************************************************************/
/*! exports provided: FormUserupdateComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormUserupdateComponent", function() { return FormUserupdateComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_class_user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/_class/user */ "./src/app/_class/user.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");







let FormUserupdateComponent = class FormUserupdateComponent {
    constructor(dialogRef, settingService, user, info) {
        this.dialogRef = dialogRef;
        this.settingService = settingService;
        this.user = user;
        this.info = info;
    }
    ngOnInit() {
        this.formUserUpdate = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]({
            name: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
            username: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
            active: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](false),
            roles: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', { validators: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required }),
        });
        this.formUserUpdate.patchValue(this.user);
    }
    onNoClick() {
        this.dialogRef.close();
    }
    onUpdateUser() {
        this.settingService.updateUser(this.user.id, this.formUserUpdate.value).subscribe({
            next: (res) => {
                this.info.showSuccessUpdate("użytkownika");
                this.dialogRef.close();
            },
            error: (err) => {
                console.log(err);
                this.info.showErrorUpdate("użytkownika");
            },
            complete: () => {
            }
        });
    }
};
FormUserupdateComponent.ctorParameters = () => [
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_4__["SettingsService"] },
    { type: src_app_class_user__WEBPACK_IMPORTED_MODULE_5__["User"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"],] }] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_6__["InfoPopupComponent"] }
];
FormUserupdateComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-form-userupdate',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./form-userupdate.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/form-userupdate/form-userupdate.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./form-userupdate.component.scss */ "./src/app/settings/users/form-userupdate/form-userupdate.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](2, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"]))
], FormUserupdateComponent);



/***/ }),

/***/ "./src/app/settings/users/users.component.scss":
/*!*****************************************************!*\
  !*** ./src/app/settings/users/users.component.scss ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3VzZXJzL3VzZXJzLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "./src/app/settings/users/users.component.ts":
/*!***************************************************!*\
  !*** ./src/app/settings/users/users.component.ts ***!
  \***************************************************/
/*! exports provided: UsersComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UsersComponent", function() { return UsersComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _settings_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../settings.service */ "./src/app/settings/settings.service.ts");
/* harmony import */ var src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/info-popup/info-popup.component */ "./src/app/info-popup/info-popup.component.ts");
/* harmony import */ var _form_users_form_users_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form-users/form-users.component */ "./src/app/settings/users/form-users/form-users.component.ts");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm2015/dialog.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _form_password_form_password_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./form-password/form-password.component */ "./src/app/settings/users/form-password/form-password.component.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/fesm2015/primeng-api.js");
/* harmony import */ var _form_userupdate_form_userupdate_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./form-userupdate/form-userupdate.component */ "./src/app/settings/users/form-userupdate/form-userupdate.component.ts");










let UsersComponent = class UsersComponent {
    constructor(location, dialog, settingService, infoPopup, confirmationService) {
        this.location = location;
        this.dialog = dialog;
        this.settingService = settingService;
        this.infoPopup = infoPopup;
        this.confirmationService = confirmationService;
    }
    ngOnInit() {
        this.loadData();
    }
    loadData() {
        this.settingService.getUsers().subscribe({
            next: (res) => {
                this.users = res;
            },
            error: (err) => {
                this.infoPopup.showErrorDownload("użytkowników");
            },
            complete: () => {
            }
        });
    }
    openDialogAdd() {
        const dialogRef = this.dialog.open(_form_users_form_users_component__WEBPACK_IMPORTED_MODULE_4__["FormUsersComponent"], {
            width: '450px'
        });
        dialogRef.afterClosed().subscribe(result => {
            this.loadData();
            console.log('The dialog was closed');
        });
    }
    openDialogUpdate(usr) {
        const dialogRef = this.dialog.open(_form_userupdate_form_userupdate_component__WEBPACK_IMPORTED_MODULE_9__["FormUserupdateComponent"], {
            data: usr,
            width: '450px'
        });
        dialogRef.afterClosed().subscribe(result => {
            this.loadData();
            console.log('The dialog was closed');
        });
    }
    openDialogChangePass(usr) {
        const dialogRef = this.dialog.open(_form_password_form_password_component__WEBPACK_IMPORTED_MODULE_7__["FormPasswordComponent"], {
            data: usr,
            width: '450px'
        });
        dialogRef.afterClosed().subscribe(result => {
            this.loadData();
            console.log('The dialog pass was closed');
        });
    }
    onDeleteUser(user) {
        this.confirmationService.confirm({
            message: 'Na pewno chcesz usunąć ' + user.name + '?',
            acceptLabel: 'Tak',
            rejectLabel: 'Nie',
            accept: () => {
                //Actual logic to perform a confirmation
                this.settingService.deleteUser(user.id).subscribe({
                    next: (res) => {
                        this.infoPopup.showSuccessDelete("użytkownia");
                    },
                    error: (err) => {
                        this.infoPopup.showErrorDelete("użytkownika");
                    },
                    complete: () => {
                        this.loadData();
                    }
                });
            }
        });
    }
    backClicked() {
        this.location.back();
    }
};
UsersComponent.ctorParameters = () => [
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_6__["Location"] },
    { type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__["MatDialog"] },
    { type: _settings_service__WEBPACK_IMPORTED_MODULE_2__["SettingsService"] },
    { type: src_app_info_popup_info_popup_component__WEBPACK_IMPORTED_MODULE_3__["InfoPopupComponent"] },
    { type: primeng_api__WEBPACK_IMPORTED_MODULE_8__["ConfirmationService"] }
];
UsersComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-users',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./users.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/settings/users/users.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./users.component.scss */ "./src/app/settings/users/users.component.scss")).default]
    })
], UsersComponent);



/***/ })

}]);
//# sourceMappingURL=settings-settings-module-es2015.js.map